"use strict";
var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);

// ../primitives/dist/console.js.text.js
var require_console_js_text = __commonJS({
  "../primitives/dist/console.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. "__esModule" has not been set), then set\n  // "default" to the CommonJS "module.exports" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// <define:process>\nvar init_define_process = __esm({\n  "<define:process>"() {\n  }\n});\n\n// ../format/dist/index.js\nvar require_dist = __commonJS({\n  "../format/dist/index.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var __defProp2 = Object.defineProperty;\n    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __hasOwnProp2 = Object.prototype.hasOwnProperty;\n    var __export2 = /* @__PURE__ */ __name((target, all) => {\n      for (var name in all)\n        __defProp2(target, name, { get: all[name], enumerable: true });\n    }, "__export");\n    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {\n      if (from && typeof from === "object" || typeof from === "function") {\n        for (let key of __getOwnPropNames2(from))\n          if (!__hasOwnProp2.call(to, key) && key !== except)\n            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });\n      }\n      return to;\n    }, "__copyProps");\n    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");\n    var src_exports = {};\n    __export2(src_exports, {\n      createFormat: () => createFormat2\n    });\n    module2.exports = __toCommonJS2(src_exports);\n    var ReflectGetOwnPropertyDescriptor = Reflect.getOwnPropertyDescriptor;\n    function GetOwnGetter(target, key) {\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\n      return descriptor ? descriptor.get : void 0;\n    }\n    __name(GetOwnGetter, "GetOwnGetter");\n    var ReflectGetPrototypeOf = Reflect.getPrototypeOf;\n    var TypedArray = ReflectGetPrototypeOf(Uint8Array);\n    var ArrayPrototypeFilter = Array.prototype.filter;\n    var ArrayPrototypePush = Array.prototype.push;\n    var DatePrototypeGetTime = Date.prototype.getTime;\n    var DatePrototypeToISOString = Date.prototype.toISOString;\n    var ObjectGetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\n    var ObjectGetOwnPropertyNames = Object.getOwnPropertyNames;\n    var ObjectGetOwnPropertySymbols = Object.getOwnPropertySymbols;\n    var ObjectKeys = Object.keys;\n    var ObjectPrototypePropertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n    var ObjectPrototypeToString = Object.prototype.toString;\n    var MapPrototypeGetSize = GetOwnGetter(Map.prototype, "size");\n    var SetPrototypeGetSize = GetOwnGetter(Set.prototype, "size");\n    var StringPrototypeIncludes = String.prototype.includes;\n    var SymbolIterator = Symbol.iterator;\n    var SymbolPrototypeToString = Symbol.prototype.toString;\n    var TypedArrayPrototypeGetLength = GetOwnGetter(\n      TypedArray.prototype,\n      "length"\n    );\n    var typedArrayStrings = /* @__PURE__ */ new Set([\n      "[object BigInt64Array]",\n      "[object BigUint64Array]",\n      "[object Float32Array]",\n      "[object Float64Array]",\n      "[object Int8Array]",\n      "[object Int16Array]",\n      "[object Int32Array]",\n      "[object Uint8Array]",\n      "[object Uint8ClampedArray]",\n      "[object Uint16Array]",\n      "[object Uint32Array]"\n    ]);\n    function getOwnNonIndexProperties(object, filter) {\n      const indexes = Array.isArray(object) || isTypedArray(object) ? new Set([...object.keys()].map((v) => v.toString())) : void 0;\n      return Object.entries(ObjectGetOwnPropertyDescriptors(object)).filter(([key, desc]) => {\n        if (indexes && indexes.has(key)) {\n          return false;\n        }\n        if (filter === 1 && !desc.enumerable) {\n          return false;\n        }\n        return true;\n      }).map(([key]) => key);\n    }\n    __name(getOwnNonIndexProperties, "getOwnNonIndexProperties");\n    var isTypedArray = /* @__PURE__ */ __name((value) => kind(value, "object") && typedArrayStrings.has(ObjectPrototypeToString.call(value)), "isTypedArray");\n    function kind(value, type) {\n      return typeof value === type;\n    }\n    __name(kind, "kind");\n    var getConstructorName = /* @__PURE__ */ __name((object) => {\n      var _a;\n      return (_a = object.constructor) == null ? void 0 : _a.name;\n    }, "getConstructorName");\n    var getPrefix = /* @__PURE__ */ __name((constructor = "", size = "") => `${constructor}${size} `, "getPrefix");\n    function createFormat2(opts = {}) {\n      if (opts.customInspectSymbol === void 0) {\n        opts.customInspectSymbol = Symbol.for("edge-runtime.inspect.custom");\n      }\n      if (opts.formatError === void 0) {\n        opts.formatError = (error2) => `[${Error.prototype.toString.call(error2)}]`;\n      }\n      const { formatError, customInspectSymbol } = opts;\n      function format2(...args) {\n        const [firstArg] = args;\n        if (!kind(firstArg, "string")) {\n          if (hasCustomSymbol(firstArg, customInspectSymbol)) {\n            return format2(firstArg[customInspectSymbol]({ format: format2 }));\n          } else {\n            return args.map((item) => inspect(item, { customInspectSymbol })).join(" ");\n          }\n        }\n        let index = 1;\n        let str = String(firstArg).replace(/%[sjdOoif%]/g, (token) => {\n          if (token === "%%")\n            return "%";\n          if (index >= args.length)\n            return token;\n          switch (token) {\n            case "%s": {\n              const arg = args[index++];\n              if (hasCustomSymbol(arg, customInspectSymbol)) {\n                return format2(arg[customInspectSymbol]({ format: format2 }));\n              } else if (isDate(arg) || isError(arg) || kind(arg, "bigint")) {\n                return format2(arg);\n              } else {\n                return String(arg);\n              }\n            }\n            case "%j":\n              return safeStringify(args[index++]);\n            case "%d": {\n              const arg = args[index++];\n              if (kind(arg, "bigint")) {\n                return format2(arg);\n              } else {\n                return String(Number(arg));\n              }\n            }\n            case "%O":\n              return inspect(args[index++], { customInspectSymbol });\n            case "%o":\n              return inspect(args[index++], {\n                customInspectSymbol,\n                showHidden: true,\n                depth: 4\n              });\n            case "%i": {\n              const arg = args[index++];\n              if (kind(arg, "bigint")) {\n                return format2(arg);\n              } else {\n                return String(parseInt(arg, 10));\n              }\n            }\n            case "%f":\n              return String(parseFloat(args[index++]));\n            default:\n              return token;\n          }\n        });\n        for (let arg = args[index]; index < args.length; arg = args[++index]) {\n          if (arg === null || !kind(arg, "object")) {\n            str += " " + arg;\n          } else {\n            str += " " + inspect(arg);\n          }\n        }\n        return str;\n      }\n      __name(format2, "format");\n      function formatValue(ctx, value, recurseTimes) {\n        if (hasCustomSymbol(value, customInspectSymbol)) {\n          return format2(value[customInspectSymbol]({ format: format2 }));\n        }\n        const formattedPrimitive = formatPrimitive(value);\n        if (formattedPrimitive !== void 0) {\n          return formattedPrimitive;\n        }\n        if (ctx.seen.includes(value)) {\n          let index = 1;\n          if (ctx.circular === void 0) {\n            ctx.circular = /* @__PURE__ */ new Map();\n            ctx.circular.set(value, index);\n          } else {\n            index = ctx.circular.get(value);\n            if (index === void 0) {\n              index = ctx.circular.size + 1;\n              ctx.circular.set(value, index);\n            }\n          }\n          return `[Circular *${index}]`;\n        }\n        return formatRaw(ctx, value, recurseTimes);\n      }\n      __name(formatValue, "formatValue");\n      function formatRaw(ctx, value, recurseTimes) {\n        let keys = [];\n        const constructor = getConstructorName(value);\n        let base = "";\n        let formatter = /* @__PURE__ */ __name(() => [], "formatter");\n        let braces = ["", ""];\n        let noIterator = true;\n        const filter = ctx.showHidden ? 0 : 1;\n        if (SymbolIterator in value) {\n          noIterator = false;\n          if (Array.isArray(value)) {\n            const prefix = constructor !== "Array" ? getPrefix(constructor, `(${value.length})`) : "";\n            keys = getOwnNonIndexProperties(value, filter);\n            braces = [`${prefix}[`, "]"];\n            if (value.length === 0 && keys.length === 0) {\n              return `${braces[0]}]`;\n            }\n            formatter = formatArray;\n          } else if (isSet(value)) {\n            const size = SetPrototypeGetSize.call(value);\n            const prefix = getPrefix(constructor, `(${size})`);\n            keys = getKeys(value, ctx.showHidden);\n            formatter = formatSet;\n            if (size === 0 && keys.length === 0) {\n              return `${prefix}{}`;\n            }\n            braces = [`${prefix}{`, "}"];\n          } else if (isMap(value)) {\n            const size = MapPrototypeGetSize.call(value);\n            const prefix = getPrefix(constructor, `(${size})`);\n            keys = getKeys(value, ctx.showHidden);\n            formatter = formatMap;\n            if (size === 0 && keys.length === 0) {\n              return `${prefix}{}`;\n            }\n            braces = [`${prefix}{`, "}"];\n          } else if (isTypedArray(value)) {\n            keys = getOwnNonIndexProperties(value, filter);\n            const size = TypedArrayPrototypeGetLength.call(value);\n            const prefix = getPrefix(constructor, `(${size})`);\n            braces = [`${prefix}[`, "]"];\n            if (value.length === 0 && keys.length === 0)\n              return `${braces[0]}]`;\n            formatter = formatTypedArray.bind(null, size);\n          } else {\n            noIterator = true;\n          }\n        }\n        if (noIterator) {\n          keys = getKeys(value, ctx.showHidden);\n          braces = ["{", "}"];\n          if (constructor === void 0) {\n            if (keys.length === 0) {\n              return `[Object: null prototype] {}`;\n            }\n          } else if (constructor === "Object") {\n            if (keys.length === 0) {\n              return `{}`;\n            }\n          } else if (kind(value, "function")) {\n            base = `[Function${value.name ? ": " + value.name : ""}]`;\n            if (keys.length === 0) {\n              return base;\n            }\n          } else if (isRegExp(value)) {\n            base = RegExp.prototype.toString.call(value);\n            if (keys.length === 0) {\n              return base;\n            }\n            base = " " + base;\n          } else if (isDate(value)) {\n            base = Number.isNaN(DatePrototypeGetTime.call(value)) ? Date.prototype.toString.call(value) : DatePrototypeToISOString.call(value);\n            if (keys.length === 0) {\n              return base;\n            }\n            base = " " + base;\n          } else if (isError(value)) {\n            base = formatError(value);\n            if (keys.length === 0) {\n              return base;\n            }\n            base = " " + base;\n          } else if (hasCustomSymbol(value, ctx.customInspectSymbol)) {\n            base = format2(value[ctx.customInspectSymbol]({ format: format2 }));\n            if (keys.length === 0) {\n              return base;\n            }\n            base = " " + base;\n          } else {\n            braces[0] = `${getPrefix(constructor)}{`;\n          }\n        }\n        if (recurseTimes && recurseTimes < 0) {\n          return isRegExp(value) ? RegExp.prototype.toString.call(value) : "[Object]";\n        }\n        ctx.seen.push(value);\n        const visibleKeys = new Set(keys);\n        const output = formatter(ctx, value, recurseTimes, visibleKeys, keys);\n        for (let i = 0; i < keys.length; i++) {\n          output.push(\n            formatProperty(\n              ctx,\n              value,\n              recurseTimes,\n              visibleKeys,\n              keys[i],\n              false\n            )\n          );\n        }\n        if (ctx.circular !== void 0) {\n          const index = ctx.circular.get(value);\n          if (index !== void 0) {\n            const reference = `<ref *${index}>`;\n            base = base === "" ? reference : `${reference} ${base}`;\n          }\n        }\n        ctx.seen.pop();\n        return reduceToSingleString(output, base, braces);\n      }\n      __name(formatRaw, "formatRaw");\n      function inspect(value, opts2) {\n        opts2 = Object.assign({ seen: [], depth: 2 }, opts2);\n        return formatValue(opts2, value, opts2.depth);\n      }\n      __name(inspect, "inspect");\n      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, isArray) {\n        let name;\n        let str;\n        const desc = Object.getOwnPropertyDescriptor(value, key) || {\n          value: value[key]\n        };\n        if (desc.value !== void 0) {\n          str = formatValue(ctx, desc.value, recurseTimes);\n        } else if (desc.get) {\n          str = desc.set ? "[Getter/Setter]" : "[Getter]";\n        } else if (desc.set) {\n          str = "[Setter]";\n        } else {\n          str = "undefined";\n        }\n        if (isArray) {\n          return str;\n        }\n        if (kind(key, "symbol")) {\n          name = `[${SymbolPrototypeToString.call(key)}]`;\n        } else if (!visibleKeys.has(key)) {\n          name = "[" + key + "]";\n        } else {\n          name = key;\n        }\n        return `${name}: ${str}`;\n      }\n      __name(formatProperty, "formatProperty");\n      function formatArray(ctx, value, recurseTimes, visibleKeys) {\n        const output = [];\n        for (let index = 0; index < value.length; ++index) {\n          if (Object.prototype.hasOwnProperty.call(value, String(index))) {\n            output.push(\n              formatProperty(\n                ctx,\n                value,\n                recurseTimes,\n                visibleKeys,\n                String(index),\n                true\n              )\n            );\n          } else {\n            output.push("");\n          }\n        }\n        return output;\n      }\n      __name(formatArray, "formatArray");\n      function formatTypedArray(length, ctx, value, recurseTimes) {\n        const output = new Array(length);\n        for (let i = 0; i < length; ++i) {\n          output[i] = value.length > 0 && kind(value[0], "number") ? String(value[i]) : formatBigInt(value[i]);\n        }\n        if (ctx.showHidden) {\n          for (const key of [\n            "BYTES_PER_ELEMENT",\n            "length",\n            "byteLength",\n            "byteOffset",\n            "buffer"\n          ]) {\n            const str = formatValue(ctx, value[key], recurseTimes);\n            ArrayPrototypePush.call(output, `[${String(key)}]: ${str}`);\n          }\n        }\n        return output;\n      }\n      __name(formatTypedArray, "formatTypedArray");\n      function formatSet(ctx, value, recurseTimes) {\n        const output = [];\n        for (const v of value) {\n          ArrayPrototypePush.call(output, formatValue(ctx, v, recurseTimes));\n        }\n        return output;\n      }\n      __name(formatSet, "formatSet");\n      function formatMap(ctx, value, recurseTimes) {\n        const output = [];\n        for (const { 0: k, 1: v } of value) {\n          output.push(\n            `${formatValue(ctx, k, recurseTimes)} => ${formatValue(\n              ctx,\n              v,\n              recurseTimes\n            )}`\n          );\n        }\n        return output;\n      }\n      __name(formatMap, "formatMap");\n      return format2;\n    }\n    __name(createFormat2, "createFormat");\n    var formatBigInt = /* @__PURE__ */ __name((bigint) => `${bigint}n`, "formatBigInt");\n    function formatPrimitive(value) {\n      if (value === null)\n        return "null";\n      if (value === void 0)\n        return "undefined";\n      if (kind(value, "string")) {\n        return `\'${JSON.stringify(value).replace(/^"|"$/g, "").replace(/\'/g, "\\\\\'").replace(/\\\\"/g, \'"\')}\'`;\n      }\n      if (kind(value, "boolean"))\n        return "" + value;\n      if (kind(value, "number"))\n        return "" + value;\n      if (kind(value, "bigint"))\n        return formatBigInt(value);\n      if (kind(value, "symbol"))\n        return value.toString();\n    }\n    __name(formatPrimitive, "formatPrimitive");\n    function hasCustomSymbol(value, customInspectSymbol) {\n      return value !== null && kind(value, "object") && customInspectSymbol in value && kind(value[customInspectSymbol], "function");\n    }\n    __name(hasCustomSymbol, "hasCustomSymbol");\n    function isRegExp(value) {\n      return kind(value, "object") && Object.prototype.toString.call(value) === "[object RegExp]";\n    }\n    __name(isRegExp, "isRegExp");\n    function isDate(value) {\n      return kind(value, "object") && Object.prototype.toString.call(value) === "[object Date]";\n    }\n    __name(isDate, "isDate");\n    function isError(value) {\n      return kind(value, "object") && (Object.prototype.toString.call(value) === "[object Error]" || value instanceof Error);\n    }\n    __name(isError, "isError");\n    function isMap(value) {\n      return kind(value, "object") && Object.prototype.toString.call(value) === "[object Map]";\n    }\n    __name(isMap, "isMap");\n    function isSet(value) {\n      return kind(value, "object") && Object.prototype.toString.call(value) === "[object Set]";\n    }\n    __name(isSet, "isSet");\n    function isBelowBreakLength(output, start, base) {\n      const breakLength = 80;\n      let totalLength = output.length + start;\n      if (totalLength + output.length > breakLength) {\n        return false;\n      }\n      for (let i = 0; i < output.length; i++) {\n        totalLength += output[i].length;\n        if (totalLength > breakLength) {\n          return false;\n        }\n      }\n      return base === "" || !StringPrototypeIncludes.call(base, "\\n");\n    }\n    __name(isBelowBreakLength, "isBelowBreakLength");\n    function reduceToSingleString(output, base, braces) {\n      const start = output.length + braces[0].length + base.length + 10;\n      if (!isBelowBreakLength(output, start, base)) {\n        return (base ? base + " " : "") + braces[0] + "\\n  " + output.join(",\\n  ") + "\\n" + braces[1];\n      }\n      return ((base ? base + " " : "") + braces[0] + " " + output.join(", ") + " " + braces[1]).trim();\n    }\n    __name(reduceToSingleString, "reduceToSingleString");\n    function safeStringify(input) {\n      if (Array.isArray(input)) {\n        input = input.map(\n          (element) => JSON.parse(JSON.stringify(element, makeCircularReplacer()))\n        );\n      }\n      return JSON.stringify(input, makeCircularReplacer());\n    }\n    __name(safeStringify, "safeStringify");\n    function makeCircularReplacer() {\n      const seen = /* @__PURE__ */ new WeakSet();\n      return (key, value) => {\n        if (value !== null && kind(value, "object")) {\n          if (seen.has(value))\n            return "[Circular]";\n          seen.add(value);\n        }\n        return value;\n      };\n    }\n    __name(makeCircularReplacer, "makeCircularReplacer");\n    function getKeys(value, showHidden = false) {\n      let keys;\n      const symbols = ObjectGetOwnPropertySymbols(value);\n      if (showHidden) {\n        keys = ObjectGetOwnPropertyNames(value);\n        if (symbols.length !== 0)\n          ArrayPrototypePush.apply(keys, symbols);\n      } else {\n        try {\n          keys = ObjectKeys(value);\n        } catch (err) {\n          keys = ObjectGetOwnPropertyNames(value);\n        }\n        if (symbols.length !== 0) {\n          const filter = /* @__PURE__ */ __name((key) => ObjectPrototypePropertyIsEnumerable.call(value, key), "filter");\n          ArrayPrototypePush.apply(keys, ArrayPrototypeFilter.call(symbols, filter));\n        }\n      }\n      return keys;\n    }\n    __name(getKeys, "getKeys");\n  }\n});\n\n// src/primitives/console.js\nvar console_exports = {};\n__export(console_exports, {\n  console: () => konsole\n});\nmodule.exports = __toCommonJS(console_exports);\ninit_define_process();\nvar import_format = __toESM(require_dist());\nvar format = (0, import_format.createFormat)();\nvar bareError = console.error.bind(console);\nvar bareLog = console.log.bind(console);\nvar assert = console.assert.bind(console);\nvar time = console.time.bind(console);\nvar timeEnd = console.timeEnd.bind(console);\nvar timeLog = console.timeLog.bind(console);\nvar trace = console.trace.bind(console);\nvar error = /* @__PURE__ */ __name((...args) => bareError(format(...args)), "error");\nvar log = /* @__PURE__ */ __name((...args) => bareLog(format(...args)), "log");\nvar konsole = {\n  assert: (assertion, ...args) => assert(assertion, format(...args)),\n  count: console.count.bind(console),\n  debug: log,\n  dir: console.dir.bind(console),\n  error,\n  info: log,\n  log,\n  time: (...args) => time(format(...args)),\n  timeEnd: (...args) => timeEnd(format(...args)),\n  timeLog,\n  trace,\n  warn: error\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  console\n});\n';
  }
});

// ../primitives/dist/timers.js.text.js
var require_timers_js_text = __commonJS({
  "../primitives/dist/timers.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// src/primitives/timers.js\nvar timers_exports = {};\n__export(timers_exports, {\n  setInterval: () => setIntervalProxy,\n  setTimeout: () => setTimeoutProxy\n});\nmodule.exports = __toCommonJS(timers_exports);\nvar setTimeoutProxy = new Proxy(setTimeout, {\n  apply: (target, thisArg, args) => {\n    const timeout = Reflect.apply(target, thisArg, args);\n    return timeout[Symbol.toPrimitive]();\n  }\n});\nvar setIntervalProxy = new Proxy(setInterval, {\n  apply: (target, thisArg, args) => {\n    const timeout = Reflect.apply(target, thisArg, args);\n    return timeout[Symbol.toPrimitive]();\n  }\n});\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  setInterval,\n  setTimeout\n});\n';
  }
});

// ../primitives/dist/events.js.text.js
var require_events_js_text = __commonJS({
  "../primitives/dist/events.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// src/primitives/events.js\nvar events_exports = {};\n__export(events_exports, {\n  FetchEvent: () => FetchEvent,\n  PromiseRejectionEvent: () => PromiseRejectionEvent\n});\nmodule.exports = __toCommonJS(events_exports);\nvar _FetchEvent = class _FetchEvent extends Event {\n  constructor(request) {\n    super("fetch");\n    this.request = request;\n    this.response = null;\n    this.awaiting = /* @__PURE__ */ new Set();\n  }\n  respondWith = (response) => {\n    this.response = response;\n  };\n  waitUntil = (promise) => {\n    this.awaiting.add(promise);\n    promise.finally(() => this.awaiting.delete(promise));\n  };\n};\n__name(_FetchEvent, "FetchEvent");\nvar FetchEvent = _FetchEvent;\nvar _PromiseRejectionEvent = class _PromiseRejectionEvent extends Event {\n  constructor(type, init) {\n    super(type, { cancelable: true });\n    this.promise = init.promise;\n    this.reason = init.reason;\n  }\n};\n__name(_PromiseRejectionEvent, "PromiseRejectionEvent");\nvar PromiseRejectionEvent = _PromiseRejectionEvent;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  FetchEvent,\n  PromiseRejectionEvent\n});\n';
  }
});

// ../primitives/dist/abort-controller.js.text.js
var require_abort_controller_js_text = __commonJS({
  "../primitives/dist/abort-controller.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// src/primitives/abort-controller.js\nvar abort_controller_exports = {};\n__export(abort_controller_exports, {\n  AbortController: () => AbortController,\n  AbortSignal: () => AbortSignal,\n  DOMException: () => DOMException\n});\nmodule.exports = __toCommonJS(abort_controller_exports);\nvar kSignal = Symbol("kSignal");\nvar kAborted = Symbol("kAborted");\nvar kReason = Symbol("kReason");\nvar kName = Symbol("kName");\nvar kOnabort = Symbol("kOnabort");\nvar _DOMException = class _DOMException extends Error {\n  constructor(message, name) {\n    super(message);\n    this[kName] = name;\n  }\n  get name() {\n    return this[kName];\n  }\n};\n__name(_DOMException, "DOMException");\nvar DOMException = _DOMException;\nfunction createAbortSignal() {\n  const signal = new EventTarget();\n  Object.setPrototypeOf(signal, AbortSignal.prototype);\n  signal[kAborted] = false;\n  signal[kReason] = void 0;\n  signal[kOnabort] = void 0;\n  return signal;\n}\n__name(createAbortSignal, "createAbortSignal");\nfunction abortSignalAbort(signal, reason) {\n  if (typeof reason === "undefined") {\n    reason = new DOMException("This operation was aborted", "AbortError");\n  }\n  if (signal.aborted) {\n    return;\n  }\n  signal[kReason] = reason;\n  signal[kAborted] = true;\n  signal.dispatchEvent(new Event("abort"));\n}\n__name(abortSignalAbort, "abortSignalAbort");\nvar _AbortController = class _AbortController {\n  constructor() {\n    this[kSignal] = createAbortSignal();\n  }\n  get signal() {\n    return this[kSignal];\n  }\n  abort(reason) {\n    abortSignalAbort(this.signal, reason);\n  }\n};\n__name(_AbortController, "AbortController");\nvar AbortController = _AbortController;\nvar _AbortSignal = class _AbortSignal extends EventTarget {\n  constructor() {\n    throw new TypeError("Illegal constructor");\n  }\n  get aborted() {\n    return this[kAborted];\n  }\n  get reason() {\n    return this[kReason];\n  }\n  get onabort() {\n    return this[kOnabort];\n  }\n  set onabort(value) {\n    if (this[kOnabort]) {\n      this.removeEventListener("abort", this[kOnabort]);\n    }\n    if (value) {\n      this[kOnabort] = value;\n      this.addEventListener("abort", this[kOnabort]);\n    }\n  }\n  throwIfAborted() {\n    if (this[kAborted]) {\n      throw this[kReason];\n    }\n  }\n  static abort(reason) {\n    const signal = createAbortSignal();\n    abortSignalAbort(signal, reason);\n    return signal;\n  }\n  static timeout(milliseconds) {\n    const signal = createAbortSignal();\n    setTimeout(() => {\n      abortSignalAbort(\n        signal,\n        new DOMException(\n          "The operation was aborted due to timeout",\n          "TimeoutError"\n        )\n      );\n    }, milliseconds);\n    return signal;\n  }\n};\n__name(_AbortSignal, "AbortSignal");\nvar AbortSignal = _AbortSignal;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  AbortController,\n  AbortSignal,\n  DOMException\n});\n';
  }
});

// ../primitives/dist/url.js.text.js
var require_url_js_text = __commonJS({
  "../primitives/dist/url.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError("Cannot " + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, "read from private field");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError("Cannot add the same private member more than once");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, "write to private field");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, "access private method");\n  return method;\n};\n\n// src/primitives/url.js\nvar url_exports = {};\n__export(url_exports, {\n  URLPattern: () => me\n});\nmodule.exports = __toCommonJS(url_exports);\n\n// ../../node_modules/.pnpm/urlpattern-polyfill@10.0.0/node_modules/urlpattern-polyfill/dist/urlpattern.js\nvar _a;\nvar R = (_a = class {\n  type = 3;\n  name = "";\n  prefix = "";\n  value = "";\n  suffix = "";\n  modifier = 3;\n  constructor(t, r, n, o, c, l) {\n    this.type = t, this.name = r, this.prefix = n, this.value = o, this.suffix = c, this.modifier = l;\n  }\n  hasCustomName() {\n    return this.name !== "" && typeof this.name != "number";\n  }\n}, __name(_a, "R"), _a);\nvar be = /[$_\\p{ID_Start}]/u;\nvar Pe = /[$_\\u200C\\u200D\\p{ID_Continue}]/u;\nvar M = ".*";\nfunction Re(e, t) {\n  return (t ? /^[\\x00-\\xFF]*$/ : /^[\\x00-\\x7F]*$/).test(e);\n}\n__name(Re, "Re");\nfunction v(e, t = false) {\n  let r = [], n = 0;\n  for (; n < e.length; ) {\n    let o = e[n], c = /* @__PURE__ */ __name(function(l) {\n      if (!t)\n        throw new TypeError(l);\n      r.push({ type: "INVALID_CHAR", index: n, value: e[n++] });\n    }, "c");\n    if (o === "*") {\n      r.push({ type: "ASTERISK", index: n, value: e[n++] });\n      continue;\n    }\n    if (o === "+" || o === "?") {\n      r.push({ type: "OTHER_MODIFIER", index: n, value: e[n++] });\n      continue;\n    }\n    if (o === "\\\\") {\n      r.push({ type: "ESCAPED_CHAR", index: n++, value: e[n++] });\n      continue;\n    }\n    if (o === "{") {\n      r.push({ type: "OPEN", index: n, value: e[n++] });\n      continue;\n    }\n    if (o === "}") {\n      r.push({ type: "CLOSE", index: n, value: e[n++] });\n      continue;\n    }\n    if (o === ":") {\n      let l = "", s = n + 1;\n      for (; s < e.length; ) {\n        let i = e.substr(s, 1);\n        if (s === n + 1 && be.test(i) || s !== n + 1 && Pe.test(i)) {\n          l += e[s++];\n          continue;\n        }\n        break;\n      }\n      if (!l) {\n        c(`Missing parameter name at ${n}`);\n        continue;\n      }\n      r.push({ type: "NAME", index: n, value: l }), n = s;\n      continue;\n    }\n    if (o === "(") {\n      let l = 1, s = "", i = n + 1, a = false;\n      if (e[i] === "?") {\n        c(`Pattern cannot start with "?" at ${i}`);\n        continue;\n      }\n      for (; i < e.length; ) {\n        if (!Re(e[i], false)) {\n          c(`Invalid character \'${e[i]}\' at ${i}.`), a = true;\n          break;\n        }\n        if (e[i] === "\\\\") {\n          s += e[i++] + e[i++];\n          continue;\n        }\n        if (e[i] === ")") {\n          if (l--, l === 0) {\n            i++;\n            break;\n          }\n        } else if (e[i] === "(" && (l++, e[i + 1] !== "?")) {\n          c(`Capturing groups are not allowed at ${i}`), a = true;\n          break;\n        }\n        s += e[i++];\n      }\n      if (a)\n        continue;\n      if (l) {\n        c(`Unbalanced pattern at ${n}`);\n        continue;\n      }\n      if (!s) {\n        c(`Missing pattern at ${n}`);\n        continue;\n      }\n      r.push({ type: "REGEX", index: n, value: s }), n = i;\n      continue;\n    }\n    r.push({ type: "CHAR", index: n, value: e[n++] });\n  }\n  return r.push({ type: "END", index: n, value: "" }), r;\n}\n__name(v, "v");\nfunction D(e, t = {}) {\n  let r = v(e);\n  t.delimiter ??= "/#?", t.prefixes ??= "./";\n  let n = `[^${S(t.delimiter)}]+?`, o = [], c = 0, l = 0, s = "", i = /* @__PURE__ */ new Set(), a = /* @__PURE__ */ __name((h) => {\n    if (l < r.length && r[l].type === h)\n      return r[l++].value;\n  }, "a"), f = /* @__PURE__ */ __name(() => a("OTHER_MODIFIER") ?? a("ASTERISK"), "f"), d = /* @__PURE__ */ __name((h) => {\n    let u = a(h);\n    if (u !== void 0)\n      return u;\n    let { type: p, index: A } = r[l];\n    throw new TypeError(`Unexpected ${p} at ${A}, expected ${h}`);\n  }, "d"), T = /* @__PURE__ */ __name(() => {\n    let h = "", u;\n    for (; u = a("CHAR") ?? a("ESCAPED_CHAR"); )\n      h += u;\n    return h;\n  }, "T"), Se = /* @__PURE__ */ __name((h) => h, "Se"), L = t.encodePart || Se, I = "", U = /* @__PURE__ */ __name((h) => {\n    I += h;\n  }, "U"), $ = /* @__PURE__ */ __name(() => {\n    I.length && (o.push(new R(3, "", "", L(I), "", 3)), I = "");\n  }, "$"), V = /* @__PURE__ */ __name((h, u, p, A, Y) => {\n    let g = 3;\n    switch (Y) {\n      case "?":\n        g = 1;\n        break;\n      case "*":\n        g = 0;\n        break;\n      case "+":\n        g = 2;\n        break;\n    }\n    if (!u && !p && g === 3) {\n      U(h);\n      return;\n    }\n    if ($(), !u && !p) {\n      if (!h)\n        return;\n      o.push(new R(3, "", "", L(h), "", g));\n      return;\n    }\n    let m;\n    p ? p === "*" ? m = M : m = p : m = n;\n    let O = 2;\n    m === n ? (O = 1, m = "") : m === M && (O = 0, m = "");\n    let P;\n    if (u ? P = u : p && (P = c++), i.has(P))\n      throw new TypeError(`Duplicate name \'${P}\'.`);\n    i.add(P), o.push(new R(O, P, L(h), m, L(A), g));\n  }, "V");\n  for (; l < r.length; ) {\n    let h = a("CHAR"), u = a("NAME"), p = a("REGEX");\n    if (!u && !p && (p = a("ASTERISK")), u || p) {\n      let g = h ?? "";\n      t.prefixes.indexOf(g) === -1 && (U(g), g = ""), $();\n      let m = f();\n      V(g, u, p, "", m);\n      continue;\n    }\n    let A = h ?? a("ESCAPED_CHAR");\n    if (A) {\n      U(A);\n      continue;\n    }\n    if (a("OPEN")) {\n      let g = T(), m = a("NAME"), O = a("REGEX");\n      !m && !O && (O = a("ASTERISK"));\n      let P = T();\n      d("CLOSE");\n      let xe = f();\n      V(g, m, O, P, xe);\n      continue;\n    }\n    $(), d("END");\n  }\n  return o;\n}\n__name(D, "D");\nfunction S(e) {\n  return e.replace(/([.+*?^${}()[\\]|/\\\\])/g, "\\\\$1");\n}\n__name(S, "S");\nfunction X(e) {\n  return e && e.ignoreCase ? "ui" : "u";\n}\n__name(X, "X");\nfunction Z(e, t, r) {\n  return F(D(e, r), t, r);\n}\n__name(Z, "Z");\nfunction k(e) {\n  switch (e) {\n    case 0:\n      return "*";\n    case 1:\n      return "?";\n    case 2:\n      return "+";\n    case 3:\n      return "";\n  }\n}\n__name(k, "k");\nfunction F(e, t, r = {}) {\n  r.delimiter ??= "/#?", r.prefixes ??= "./", r.sensitive ??= false, r.strict ??= false, r.end ??= true, r.start ??= true, r.endsWith = "";\n  let n = r.start ? "^" : "";\n  for (let s of e) {\n    if (s.type === 3) {\n      s.modifier === 3 ? n += S(s.value) : n += `(?:${S(s.value)})${k(s.modifier)}`;\n      continue;\n    }\n    t && t.push(s.name);\n    let i = `[^${S(r.delimiter)}]+?`, a = s.value;\n    if (s.type === 1 ? a = i : s.type === 0 && (a = M), !s.prefix.length && !s.suffix.length) {\n      s.modifier === 3 || s.modifier === 1 ? n += `(${a})${k(s.modifier)}` : n += `((?:${a})${k(s.modifier)})`;\n      continue;\n    }\n    if (s.modifier === 3 || s.modifier === 1) {\n      n += `(?:${S(s.prefix)}(${a})${S(s.suffix)})`, n += k(s.modifier);\n      continue;\n    }\n    n += `(?:${S(s.prefix)}`, n += `((?:${a})(?:`, n += S(s.suffix), n += S(s.prefix), n += `(?:${a}))*)${S(s.suffix)})`, s.modifier === 0 && (n += "?");\n  }\n  let o = `[${S(r.endsWith)}]|$`, c = `[${S(r.delimiter)}]`;\n  if (r.end)\n    return r.strict || (n += `${c}?`), r.endsWith.length ? n += `(?=${o})` : n += "$", new RegExp(n, X(r));\n  r.strict || (n += `(?:${c}(?=${o}))?`);\n  let l = false;\n  if (e.length) {\n    let s = e[e.length - 1];\n    s.type === 3 && s.modifier === 3 && (l = r.delimiter.indexOf(s) > -1);\n  }\n  return l || (n += `(?=${c}|${o})`), new RegExp(n, X(r));\n}\n__name(F, "F");\nvar x = { delimiter: "", prefixes: "", sensitive: true, strict: true };\nvar B = { delimiter: ".", prefixes: "", sensitive: true, strict: true };\nvar q = { delimiter: "/", prefixes: "/", sensitive: true, strict: true };\nfunction J(e, t) {\n  return e.length ? e[0] === "/" ? true : !t || e.length < 2 ? false : (e[0] == "\\\\" || e[0] == "{") && e[1] == "/" : false;\n}\n__name(J, "J");\nfunction Q(e, t) {\n  return e.startsWith(t) ? e.substring(t.length, e.length) : e;\n}\n__name(Q, "Q");\nfunction Ee(e, t) {\n  return e.endsWith(t) ? e.substr(0, e.length - t.length) : e;\n}\n__name(Ee, "Ee");\nfunction W(e) {\n  return !e || e.length < 2 ? false : e[0] === "[" || (e[0] === "\\\\" || e[0] === "{") && e[1] === "[";\n}\n__name(W, "W");\nvar ee = ["ftp", "file", "http", "https", "ws", "wss"];\nfunction N(e) {\n  if (!e)\n    return true;\n  for (let t of ee)\n    if (e.test(t))\n      return true;\n  return false;\n}\n__name(N, "N");\nfunction te(e, t) {\n  if (e = Q(e, "#"), t || e === "")\n    return e;\n  let r = new URL("https://example.com");\n  return r.hash = e, r.hash ? r.hash.substring(1, r.hash.length) : "";\n}\n__name(te, "te");\nfunction re(e, t) {\n  if (e = Q(e, "?"), t || e === "")\n    return e;\n  let r = new URL("https://example.com");\n  return r.search = e, r.search ? r.search.substring(1, r.search.length) : "";\n}\n__name(re, "re");\nfunction ne(e, t) {\n  return t || e === "" ? e : W(e) ? j(e) : z(e);\n}\n__name(ne, "ne");\nfunction se(e, t) {\n  if (t || e === "")\n    return e;\n  let r = new URL("https://example.com");\n  return r.password = e, r.password;\n}\n__name(se, "se");\nfunction ie(e, t) {\n  if (t || e === "")\n    return e;\n  let r = new URL("https://example.com");\n  return r.username = e, r.username;\n}\n__name(ie, "ie");\nfunction ae(e, t, r) {\n  if (r || e === "")\n    return e;\n  if (t && !ee.includes(t))\n    return new URL(`${t}:${e}`).pathname;\n  let n = e[0] == "/";\n  return e = new URL(n ? e : "/-" + e, "https://example.com").pathname, n || (e = e.substring(2, e.length)), e;\n}\n__name(ae, "ae");\nfunction oe(e, t, r) {\n  return _(t) === e && (e = ""), r || e === "" ? e : K(e);\n}\n__name(oe, "oe");\nfunction ce(e, t) {\n  return e = Ee(e, ":"), t || e === "" ? e : y(e);\n}\n__name(ce, "ce");\nfunction _(e) {\n  switch (e) {\n    case "ws":\n    case "http":\n      return "80";\n    case "wws":\n    case "https":\n      return "443";\n    case "ftp":\n      return "21";\n    default:\n      return "";\n  }\n}\n__name(_, "_");\nfunction y(e) {\n  if (e === "")\n    return e;\n  if (/^[-+.A-Za-z0-9]*$/.test(e))\n    return e.toLowerCase();\n  throw new TypeError(`Invalid protocol \'${e}\'.`);\n}\n__name(y, "y");\nfunction le(e) {\n  if (e === "")\n    return e;\n  let t = new URL("https://example.com");\n  return t.username = e, t.username;\n}\n__name(le, "le");\nfunction fe(e) {\n  if (e === "")\n    return e;\n  let t = new URL("https://example.com");\n  return t.password = e, t.password;\n}\n__name(fe, "fe");\nfunction z(e) {\n  if (e === "")\n    return e;\n  if (/[\\t\\n\\r #%/:<>?@[\\]^\\\\|]/g.test(e))\n    throw new TypeError(`Invalid hostname \'${e}\'`);\n  let t = new URL("https://example.com");\n  return t.hostname = e, t.hostname;\n}\n__name(z, "z");\nfunction j(e) {\n  if (e === "")\n    return e;\n  if (/[^0-9a-fA-F[\\]:]/g.test(e))\n    throw new TypeError(`Invalid IPv6 hostname \'${e}\'`);\n  return e.toLowerCase();\n}\n__name(j, "j");\nfunction K(e) {\n  if (e === "" || /^[0-9]*$/.test(e) && parseInt(e) <= 65535)\n    return e;\n  throw new TypeError(`Invalid port \'${e}\'.`);\n}\n__name(K, "K");\nfunction he(e) {\n  if (e === "")\n    return e;\n  let t = new URL("https://example.com");\n  return t.pathname = e[0] !== "/" ? "/-" + e : e, e[0] !== "/" ? t.pathname.substring(2, t.pathname.length) : t.pathname;\n}\n__name(he, "he");\nfunction ue(e) {\n  return e === "" ? e : new URL(`data:${e}`).pathname;\n}\n__name(ue, "ue");\nfunction de(e) {\n  if (e === "")\n    return e;\n  let t = new URL("https://example.com");\n  return t.search = e, t.search.substring(1, t.search.length);\n}\n__name(de, "de");\nfunction pe(e) {\n  if (e === "")\n    return e;\n  let t = new URL("https://example.com");\n  return t.hash = e, t.hash.substring(1, t.hash.length);\n}\n__name(pe, "pe");\nvar _i, _n, _t, _e, _s, _l, _o, _d, _p, _g, _r, r_fn, _R, R_fn, _b, b_fn, _u, u_fn, _m, m_fn, _a2, a_fn, _P, P_fn, _E, E_fn, _S, S_fn, _O, O_fn, _k, k_fn, _x, x_fn, _h, h_fn, _f, f_fn, _T, T_fn, _A, A_fn, _y, y_fn, _w, w_fn, _c, c_fn, _C, C_fn, _a3;\nvar H = (_a3 = class {\n  constructor(t) {\n    __privateAdd(this, _r);\n    __privateAdd(this, _R);\n    __privateAdd(this, _b);\n    __privateAdd(this, _u);\n    __privateAdd(this, _m);\n    __privateAdd(this, _a2);\n    __privateAdd(this, _P);\n    __privateAdd(this, _E);\n    __privateAdd(this, _S);\n    __privateAdd(this, _O);\n    __privateAdd(this, _k);\n    __privateAdd(this, _x);\n    __privateAdd(this, _h);\n    __privateAdd(this, _f);\n    __privateAdd(this, _T);\n    __privateAdd(this, _A);\n    __privateAdd(this, _y);\n    __privateAdd(this, _w);\n    __privateAdd(this, _c);\n    __privateAdd(this, _C);\n    __privateAdd(this, _i, void 0);\n    __privateAdd(this, _n, []);\n    __privateAdd(this, _t, {});\n    __privateAdd(this, _e, 0);\n    __privateAdd(this, _s, 1);\n    __privateAdd(this, _l, 0);\n    __privateAdd(this, _o, 0);\n    __privateAdd(this, _d, 0);\n    __privateAdd(this, _p, 0);\n    __privateAdd(this, _g, false);\n    __privateSet(this, _i, t);\n  }\n  get result() {\n    return __privateGet(this, _t);\n  }\n  parse() {\n    for (__privateSet(this, _n, v(__privateGet(this, _i), true)); __privateGet(this, _e) < __privateGet(this, _n).length; __privateSet(this, _e, __privateGet(this, _e) + __privateGet(this, _s))) {\n      if (__privateSet(this, _s, 1), __privateGet(this, _n)[__privateGet(this, _e)].type === "END") {\n        if (__privateGet(this, _o) === 0) {\n          __privateMethod(this, _b, b_fn).call(this), __privateMethod(this, _f, f_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 9, 1) : __privateMethod(this, _h, h_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 8, 1) : __privateMethod(this, _r, r_fn).call(this, 7, 0);\n          continue;\n        } else if (__privateGet(this, _o) === 2) {\n          __privateMethod(this, _u, u_fn).call(this, 5);\n          continue;\n        }\n        __privateMethod(this, _r, r_fn).call(this, 10, 0);\n        break;\n      }\n      if (__privateGet(this, _d) > 0)\n        if (__privateMethod(this, _A, A_fn).call(this))\n          __privateSet(this, _d, __privateGet(this, _d) - 1);\n        else\n          continue;\n      if (__privateMethod(this, _T, T_fn).call(this)) {\n        __privateSet(this, _d, __privateGet(this, _d) + 1);\n        continue;\n      }\n      switch (__privateGet(this, _o)) {\n        case 0:\n          __privateMethod(this, _P, P_fn).call(this) && __privateMethod(this, _u, u_fn).call(this, 1);\n          break;\n        case 1:\n          if (__privateMethod(this, _P, P_fn).call(this)) {\n            __privateMethod(this, _C, C_fn).call(this);\n            let t = 7, r = 1;\n            __privateMethod(this, _E, E_fn).call(this) ? (t = 2, r = 3) : __privateGet(this, _g) && (t = 2), __privateMethod(this, _r, r_fn).call(this, t, r);\n          }\n          break;\n        case 2:\n          __privateMethod(this, _S, S_fn).call(this) ? __privateMethod(this, _u, u_fn).call(this, 3) : (__privateMethod(this, _x, x_fn).call(this) || __privateMethod(this, _h, h_fn).call(this) || __privateMethod(this, _f, f_fn).call(this)) && __privateMethod(this, _u, u_fn).call(this, 5);\n          break;\n        case 3:\n          __privateMethod(this, _O, O_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 4, 1) : __privateMethod(this, _S, S_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 5, 1);\n          break;\n        case 4:\n          __privateMethod(this, _S, S_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 5, 1);\n          break;\n        case 5:\n          __privateMethod(this, _y, y_fn).call(this) ? __privateSet(this, _p, __privateGet(this, _p) + 1) : __privateMethod(this, _w, w_fn).call(this) && __privateSet(this, _p, __privateGet(this, _p) - 1), __privateMethod(this, _k, k_fn).call(this) && !__privateGet(this, _p) ? __privateMethod(this, _r, r_fn).call(this, 6, 1) : __privateMethod(this, _x, x_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 7, 0) : __privateMethod(this, _h, h_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 8, 1) : __privateMethod(this, _f, f_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 9, 1);\n          break;\n        case 6:\n          __privateMethod(this, _x, x_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 7, 0) : __privateMethod(this, _h, h_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 8, 1) : __privateMethod(this, _f, f_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 9, 1);\n          break;\n        case 7:\n          __privateMethod(this, _h, h_fn).call(this) ? __privateMethod(this, _r, r_fn).call(this, 8, 1) : __privateMethod(this, _f, f_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 9, 1);\n          break;\n        case 8:\n          __privateMethod(this, _f, f_fn).call(this) && __privateMethod(this, _r, r_fn).call(this, 9, 1);\n          break;\n        case 9:\n          break;\n        case 10:\n          break;\n      }\n    }\n    __privateGet(this, _t).hostname !== void 0 && __privateGet(this, _t).port === void 0 && (__privateGet(this, _t).port = "");\n  }\n}, _i = new WeakMap(), _n = new WeakMap(), _t = new WeakMap(), _e = new WeakMap(), _s = new WeakMap(), _l = new WeakMap(), _o = new WeakMap(), _d = new WeakMap(), _p = new WeakMap(), _g = new WeakMap(), _r = new WeakSet(), r_fn = /* @__PURE__ */ __name(function(t, r) {\n  switch (__privateGet(this, _o)) {\n    case 0:\n      break;\n    case 1:\n      __privateGet(this, _t).protocol = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 2:\n      break;\n    case 3:\n      __privateGet(this, _t).username = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 4:\n      __privateGet(this, _t).password = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 5:\n      __privateGet(this, _t).hostname = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 6:\n      __privateGet(this, _t).port = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 7:\n      __privateGet(this, _t).pathname = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 8:\n      __privateGet(this, _t).search = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 9:\n      __privateGet(this, _t).hash = __privateMethod(this, _c, c_fn).call(this);\n      break;\n    case 10:\n      break;\n  }\n  __privateGet(this, _o) !== 0 && t !== 10 && ([1, 2, 3, 4].includes(__privateGet(this, _o)) && [6, 7, 8, 9].includes(t) && (__privateGet(this, _t).hostname ??= ""), [1, 2, 3, 4, 5, 6].includes(__privateGet(this, _o)) && [8, 9].includes(t) && (__privateGet(this, _t).pathname ??= __privateGet(this, _g) ? "/" : ""), [1, 2, 3, 4, 5, 6, 7].includes(__privateGet(this, _o)) && t === 9 && (__privateGet(this, _t).search ??= "")), __privateMethod(this, _R, R_fn).call(this, t, r);\n}, "#r"), _R = new WeakSet(), R_fn = /* @__PURE__ */ __name(function(t, r) {\n  __privateSet(this, _o, t), __privateSet(this, _l, __privateGet(this, _e) + r), __privateSet(this, _e, __privateGet(this, _e) + r), __privateSet(this, _s, 0);\n}, "#R"), _b = new WeakSet(), b_fn = /* @__PURE__ */ __name(function() {\n  __privateSet(this, _e, __privateGet(this, _l)), __privateSet(this, _s, 0);\n}, "#b"), _u = new WeakSet(), u_fn = /* @__PURE__ */ __name(function(t) {\n  __privateMethod(this, _b, b_fn).call(this), __privateSet(this, _o, t);\n}, "#u"), _m = new WeakSet(), m_fn = /* @__PURE__ */ __name(function(t) {\n  return t < 0 && (t = __privateGet(this, _n).length - t), t < __privateGet(this, _n).length ? __privateGet(this, _n)[t] : __privateGet(this, _n)[__privateGet(this, _n).length - 1];\n}, "#m"), _a2 = new WeakSet(), a_fn = /* @__PURE__ */ __name(function(t, r) {\n  let n = __privateMethod(this, _m, m_fn).call(this, t);\n  return n.value === r && (n.type === "CHAR" || n.type === "ESCAPED_CHAR" || n.type === "INVALID_CHAR");\n}, "#a"), _P = new WeakSet(), P_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), ":");\n}, "#P"), _E = new WeakSet(), E_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e) + 1, "/") && __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e) + 2, "/");\n}, "#E"), _S = new WeakSet(), S_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "@");\n}, "#S"), _O = new WeakSet(), O_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), ":");\n}, "#O"), _k = new WeakSet(), k_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), ":");\n}, "#k"), _x = new WeakSet(), x_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "/");\n}, "#x"), _h = new WeakSet(), h_fn = /* @__PURE__ */ __name(function() {\n  if (__privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "?"))\n    return true;\n  if (__privateGet(this, _n)[__privateGet(this, _e)].value !== "?")\n    return false;\n  let t = __privateMethod(this, _m, m_fn).call(this, __privateGet(this, _e) - 1);\n  return t.type !== "NAME" && t.type !== "REGEX" && t.type !== "CLOSE" && t.type !== "ASTERISK";\n}, "#h"), _f = new WeakSet(), f_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "#");\n}, "#f"), _T = new WeakSet(), T_fn = /* @__PURE__ */ __name(function() {\n  return __privateGet(this, _n)[__privateGet(this, _e)].type == "OPEN";\n}, "#T"), _A = new WeakSet(), A_fn = /* @__PURE__ */ __name(function() {\n  return __privateGet(this, _n)[__privateGet(this, _e)].type == "CLOSE";\n}, "#A"), _y = new WeakSet(), y_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "[");\n}, "#y"), _w = new WeakSet(), w_fn = /* @__PURE__ */ __name(function() {\n  return __privateMethod(this, _a2, a_fn).call(this, __privateGet(this, _e), "]");\n}, "#w"), _c = new WeakSet(), c_fn = /* @__PURE__ */ __name(function() {\n  let t = __privateGet(this, _n)[__privateGet(this, _e)], r = __privateMethod(this, _m, m_fn).call(this, __privateGet(this, _l)).index;\n  return __privateGet(this, _i).substring(r, t.index);\n}, "#c"), _C = new WeakSet(), C_fn = /* @__PURE__ */ __name(function() {\n  let t = {};\n  Object.assign(t, x), t.encodePart = y;\n  let r = Z(__privateMethod(this, _c, c_fn).call(this), void 0, t);\n  __privateSet(this, _g, N(r));\n}, "#C"), __name(_a3, "H"), _a3);\nvar G = ["protocol", "username", "password", "hostname", "port", "pathname", "search", "hash"];\nvar E = "*";\nfunction ge(e, t) {\n  if (typeof e != "string")\n    throw new TypeError("parameter 1 is not of type \'string\'.");\n  let r = new URL(e, t);\n  return { protocol: r.protocol.substring(0, r.protocol.length - 1), username: r.username, password: r.password, hostname: r.hostname, port: r.port, pathname: r.pathname, search: r.search !== "" ? r.search.substring(1, r.search.length) : void 0, hash: r.hash !== "" ? r.hash.substring(1, r.hash.length) : void 0 };\n}\n__name(ge, "ge");\nfunction b(e, t) {\n  return t ? C(e) : e;\n}\n__name(b, "b");\nfunction w(e, t, r) {\n  let n;\n  if (typeof t.baseURL == "string")\n    try {\n      n = new URL(t.baseURL), t.protocol === void 0 && (e.protocol = b(n.protocol.substring(0, n.protocol.length - 1), r)), !r && t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && t.username === void 0 && (e.username = b(n.username, r)), !r && t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && t.username === void 0 && t.password === void 0 && (e.password = b(n.password, r)), t.protocol === void 0 && t.hostname === void 0 && (e.hostname = b(n.hostname, r)), t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && (e.port = b(n.port, r)), t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && t.pathname === void 0 && (e.pathname = b(n.pathname, r)), t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && t.pathname === void 0 && t.search === void 0 && (e.search = b(n.search.substring(1, n.search.length), r)), t.protocol === void 0 && t.hostname === void 0 && t.port === void 0 && t.pathname === void 0 && t.search === void 0 && t.hash === void 0 && (e.hash = b(n.hash.substring(1, n.hash.length), r));\n    } catch {\n      throw new TypeError(`invalid baseURL \'${t.baseURL}\'.`);\n    }\n  if (typeof t.protocol == "string" && (e.protocol = ce(t.protocol, r)), typeof t.username == "string" && (e.username = ie(t.username, r)), typeof t.password == "string" && (e.password = se(t.password, r)), typeof t.hostname == "string" && (e.hostname = ne(t.hostname, r)), typeof t.port == "string" && (e.port = oe(t.port, e.protocol, r)), typeof t.pathname == "string") {\n    if (e.pathname = t.pathname, n && !J(e.pathname, r)) {\n      let o = n.pathname.lastIndexOf("/");\n      o >= 0 && (e.pathname = b(n.pathname.substring(0, o + 1), r) + e.pathname);\n    }\n    e.pathname = ae(e.pathname, e.protocol, r);\n  }\n  return typeof t.search == "string" && (e.search = re(t.search, r)), typeof t.hash == "string" && (e.hash = te(t.hash, r)), e;\n}\n__name(w, "w");\nfunction C(e) {\n  return e.replace(/([+*?:{}()\\\\])/g, "\\\\$1");\n}\n__name(C, "C");\nfunction Oe(e) {\n  return e.replace(/([.+*?^${}()[\\]|/\\\\])/g, "\\\\$1");\n}\n__name(Oe, "Oe");\nfunction ke(e, t) {\n  t.delimiter ??= "/#?", t.prefixes ??= "./", t.sensitive ??= false, t.strict ??= false, t.end ??= true, t.start ??= true, t.endsWith = "";\n  let r = ".*", n = `[^${Oe(t.delimiter)}]+?`, o = /[$_\\u200C\\u200D\\p{ID_Continue}]/u, c = "";\n  for (let l = 0; l < e.length; ++l) {\n    let s = e[l];\n    if (s.type === 3) {\n      if (s.modifier === 3) {\n        c += C(s.value);\n        continue;\n      }\n      c += `{${C(s.value)}}${k(s.modifier)}`;\n      continue;\n    }\n    let i = s.hasCustomName(), a = !!s.suffix.length || !!s.prefix.length && (s.prefix.length !== 1 || !t.prefixes.includes(s.prefix)), f = l > 0 ? e[l - 1] : null, d = l < e.length - 1 ? e[l + 1] : null;\n    if (!a && i && s.type === 1 && s.modifier === 3 && d && !d.prefix.length && !d.suffix.length)\n      if (d.type === 3) {\n        let T = d.value.length > 0 ? d.value[0] : "";\n        a = o.test(T);\n      } else\n        a = !d.hasCustomName();\n    if (!a && !s.prefix.length && f && f.type === 3) {\n      let T = f.value[f.value.length - 1];\n      a = t.prefixes.includes(T);\n    }\n    a && (c += "{"), c += C(s.prefix), i && (c += `:${s.name}`), s.type === 2 ? c += `(${s.value})` : s.type === 1 ? i || (c += `(${n})`) : s.type === 0 && (!i && (!f || f.type === 3 || f.modifier !== 3 || a || s.prefix !== "") ? c += "*" : c += `(${r})`), s.type === 1 && i && s.suffix.length && o.test(s.suffix[0]) && (c += "\\\\"), c += C(s.suffix), a && (c += "}"), s.modifier !== 3 && (c += k(s.modifier));\n  }\n  return c;\n}\n__name(ke, "ke");\nvar _i2, _n2, _t2, _e2, _s2, _l2, _a4;\nvar me = (_a4 = class {\n  constructor(t = {}, r, n) {\n    __privateAdd(this, _i2, void 0);\n    __privateAdd(this, _n2, {});\n    __privateAdd(this, _t2, {});\n    __privateAdd(this, _e2, {});\n    __privateAdd(this, _s2, {});\n    __privateAdd(this, _l2, false);\n    try {\n      let o;\n      if (typeof r == "string" ? o = r : n = r, typeof t == "string") {\n        let i = new H(t);\n        if (i.parse(), t = i.result, o === void 0 && typeof t.protocol != "string")\n          throw new TypeError("A base URL must be provided for a relative constructor string.");\n        t.baseURL = o;\n      } else {\n        if (!t || typeof t != "object")\n          throw new TypeError("parameter 1 is not of type \'string\' and cannot convert to dictionary.");\n        if (o)\n          throw new TypeError("parameter 1 is not of type \'string\'.");\n      }\n      typeof n > "u" && (n = { ignoreCase: false });\n      let c = { ignoreCase: n.ignoreCase === true }, l = { pathname: E, protocol: E, username: E, password: E, hostname: E, port: E, search: E, hash: E };\n      __privateSet(this, _i2, w(l, t, true)), _(__privateGet(this, _i2).protocol) === __privateGet(this, _i2).port && (__privateGet(this, _i2).port = "");\n      let s;\n      for (s of G) {\n        if (!(s in __privateGet(this, _i2)))\n          continue;\n        let i = {}, a = __privateGet(this, _i2)[s];\n        switch (__privateGet(this, _t2)[s] = [], s) {\n          case "protocol":\n            Object.assign(i, x), i.encodePart = y;\n            break;\n          case "username":\n            Object.assign(i, x), i.encodePart = le;\n            break;\n          case "password":\n            Object.assign(i, x), i.encodePart = fe;\n            break;\n          case "hostname":\n            Object.assign(i, B), W(a) ? i.encodePart = j : i.encodePart = z;\n            break;\n          case "port":\n            Object.assign(i, x), i.encodePart = K;\n            break;\n          case "pathname":\n            N(__privateGet(this, _n2).protocol) ? (Object.assign(i, q, c), i.encodePart = he) : (Object.assign(i, x, c), i.encodePart = ue);\n            break;\n          case "search":\n            Object.assign(i, x, c), i.encodePart = de;\n            break;\n          case "hash":\n            Object.assign(i, x, c), i.encodePart = pe;\n            break;\n        }\n        try {\n          __privateGet(this, _s2)[s] = D(a, i), __privateGet(this, _n2)[s] = F(__privateGet(this, _s2)[s], __privateGet(this, _t2)[s], i), __privateGet(this, _e2)[s] = ke(__privateGet(this, _s2)[s], i), __privateSet(this, _l2, __privateGet(this, _l2) || __privateGet(this, _s2)[s].some((f) => f.type === 2));\n        } catch {\n          throw new TypeError(`invalid ${s} pattern \'${__privateGet(this, _i2)[s]}\'.`);\n        }\n      }\n    } catch (o) {\n      throw new TypeError(`Failed to construct \'URLPattern\': ${o.message}`);\n    }\n  }\n  test(t = {}, r) {\n    let n = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };\n    if (typeof t != "string" && r)\n      throw new TypeError("parameter 1 is not of type \'string\'.");\n    if (typeof t > "u")\n      return false;\n    try {\n      typeof t == "object" ? n = w(n, t, false) : n = w(n, ge(t, r), false);\n    } catch {\n      return false;\n    }\n    let o;\n    for (o of G)\n      if (!__privateGet(this, _n2)[o].exec(n[o]))\n        return false;\n    return true;\n  }\n  exec(t = {}, r) {\n    let n = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };\n    if (typeof t != "string" && r)\n      throw new TypeError("parameter 1 is not of type \'string\'.");\n    if (typeof t > "u")\n      return;\n    try {\n      typeof t == "object" ? n = w(n, t, false) : n = w(n, ge(t, r), false);\n    } catch {\n      return null;\n    }\n    let o = {};\n    r ? o.inputs = [t, r] : o.inputs = [t];\n    let c;\n    for (c of G) {\n      let l = __privateGet(this, _n2)[c].exec(n[c]);\n      if (!l)\n        return null;\n      let s = {};\n      for (let [i, a] of __privateGet(this, _t2)[c].entries())\n        if (typeof a == "string" || typeof a == "number") {\n          let f = l[i + 1];\n          s[a] = f;\n        }\n      o[c] = { input: n[c] ?? "", groups: s };\n    }\n    return o;\n  }\n  static compareComponent(t, r, n) {\n    let o = /* @__PURE__ */ __name((i, a) => {\n      for (let f of ["type", "modifier", "prefix", "value", "suffix"]) {\n        if (i[f] < a[f])\n          return -1;\n        if (i[f] === a[f])\n          continue;\n        return 1;\n      }\n      return 0;\n    }, "o"), c = new R(3, "", "", "", "", 3), l = new R(0, "", "", "", "", 3), s = /* @__PURE__ */ __name((i, a) => {\n      let f = 0;\n      for (; f < Math.min(i.length, a.length); ++f) {\n        let d = o(i[f], a[f]);\n        if (d)\n          return d;\n      }\n      return i.length === a.length ? 0 : o(i[f] ?? c, a[f] ?? c);\n    }, "s");\n    return !__privateGet(r, _e2)[t] && !__privateGet(n, _e2)[t] ? 0 : __privateGet(r, _e2)[t] && !__privateGet(n, _e2)[t] ? s(__privateGet(r, _s2)[t], [l]) : !__privateGet(r, _e2)[t] && __privateGet(n, _e2)[t] ? s([l], __privateGet(n, _s2)[t]) : s(__privateGet(r, _s2)[t], __privateGet(n, _s2)[t]);\n  }\n  get protocol() {\n    return __privateGet(this, _e2).protocol;\n  }\n  get username() {\n    return __privateGet(this, _e2).username;\n  }\n  get password() {\n    return __privateGet(this, _e2).password;\n  }\n  get hostname() {\n    return __privateGet(this, _e2).hostname;\n  }\n  get port() {\n    return __privateGet(this, _e2).port;\n  }\n  get pathname() {\n    return __privateGet(this, _e2).pathname;\n  }\n  get search() {\n    return __privateGet(this, _e2).search;\n  }\n  get hash() {\n    return __privateGet(this, _e2).hash;\n  }\n  get hasRegExpGroups() {\n    return __privateGet(this, _l2);\n  }\n}, _i2 = new WeakMap(), _n2 = new WeakMap(), _t2 = new WeakMap(), _e2 = new WeakMap(), _s2 = new WeakMap(), _l2 = new WeakMap(), __name(_a4, "me"), _a4);\n\n// ../../node_modules/.pnpm/urlpattern-polyfill@10.0.0/node_modules/urlpattern-polyfill/index.js\nif (!globalThis.URLPattern) {\n  globalThis.URLPattern = me;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  URLPattern\n});\n';
  }
});

// ../primitives/dist/blob.js.text.js
var require_blob_js_text = __commonJS({
  "../primitives/dist/blob.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = `"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// <define:process>
var init_define_process = __esm({
  "<define:process>"() {
  }
});

// ../../node_modules/.pnpm/blob-polyfill@7.0.20220408/node_modules/blob-polyfill/Blob.js
var require_Blob = __commonJS({
  "../../node_modules/.pnpm/blob-polyfill@7.0.20220408/node_modules/blob-polyfill/Blob.js"(exports2) {
    "use strict";
    init_define_process();
    (function(global2) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define(["exports"], factory);
        } else if (typeof exports2 === "object" && typeof exports2.nodeName !== "string") {
          factory(exports2);
        } else {
          factory(global2);
        }
      })(function(exports3) {
        "use strict";
        var BlobBuilder = global2.BlobBuilder || global2.WebKitBlobBuilder || global2.MSBlobBuilder || global2.MozBlobBuilder;
        var URL = global2.URL || global2.webkitURL || function(href, a) {
          a = document.createElement("a");
          a.href = href;
          return a;
        };
        var origBlob = global2.Blob;
        var createObjectURL = URL.createObjectURL;
        var revokeObjectURL = URL.revokeObjectURL;
        var strTag = global2.Symbol && global2.Symbol.toStringTag;
        var blobSupported = false;
        var blobSupportsArrayBufferView = false;
        var blobBuilderSupported = BlobBuilder && BlobBuilder.prototype.append && BlobBuilder.prototype.getBlob;
        try {
          blobSupported = new Blob(["\\xE4"]).size === 2;
          blobSupportsArrayBufferView = new Blob([new Uint8Array([1, 2])]).size === 2;
        } catch (e) {
        }
        function mapArrayBufferViews(ary) {
          return ary.map(function(chunk) {
            if (chunk.buffer instanceof ArrayBuffer) {
              var buf = chunk.buffer;
              if (chunk.byteLength !== buf.byteLength) {
                var copy = new Uint8Array(chunk.byteLength);
                copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
                buf = copy.buffer;
              }
              return buf;
            }
            return chunk;
          });
        }
        __name(mapArrayBufferViews, "mapArrayBufferViews");
        function BlobBuilderConstructor(ary, options) {
          options = options || {};
          var bb = new BlobBuilder();
          mapArrayBufferViews(ary).forEach(function(part) {
            bb.append(part);
          });
          return options.type ? bb.getBlob(options.type) : bb.getBlob();
        }
        __name(BlobBuilderConstructor, "BlobBuilderConstructor");
        function BlobConstructor(ary, options) {
          return new origBlob(mapArrayBufferViews(ary), options || {});
        }
        __name(BlobConstructor, "BlobConstructor");
        if (global2.Blob) {
          BlobBuilderConstructor.prototype = Blob.prototype;
          BlobConstructor.prototype = Blob.prototype;
        }
        function stringEncode(string) {
          var pos = 0;
          var len = string.length;
          var Arr = global2.Uint8Array || Array;
          var at = 0;
          var tlen = Math.max(32, len + (len >> 1) + 7);
          var target = new Arr(tlen >> 3 << 3);
          while (pos < len) {
            var value = string.charCodeAt(pos++);
            if (value >= 55296 && value <= 56319) {
              if (pos < len) {
                var extra = string.charCodeAt(pos);
                if ((extra & 64512) === 56320) {
                  ++pos;
                  value = ((value & 1023) << 10) + (extra & 1023) + 65536;
                }
              }
              if (value >= 55296 && value <= 56319) {
                continue;
              }
            }
            if (at + 4 > target.length) {
              tlen += 8;
              tlen *= 1 + pos / string.length * 2;
              tlen = tlen >> 3 << 3;
              var update = new Uint8Array(tlen);
              update.set(target);
              target = update;
            }
            if ((value & 4294967168) === 0) {
              target[at++] = value;
              continue;
            } else if ((value & 4294965248) === 0) {
              target[at++] = value >> 6 & 31 | 192;
            } else if ((value & 4294901760) === 0) {
              target[at++] = value >> 12 & 15 | 224;
              target[at++] = value >> 6 & 63 | 128;
            } else if ((value & 4292870144) === 0) {
              target[at++] = value >> 18 & 7 | 240;
              target[at++] = value >> 12 & 63 | 128;
              target[at++] = value >> 6 & 63 | 128;
            } else {
              continue;
            }
            target[at++] = value & 63 | 128;
          }
          return target.slice(0, at);
        }
        __name(stringEncode, "stringEncode");
        function stringDecode(buf) {
          var end = buf.length;
          var res = [];
          var i = 0;
          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;
              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 128) {
                    codePoint = firstByte;
                  }
                  break;
                case 2:
                  secondByte = buf[i + 1];
                  if ((secondByte & 192) === 128) {
                    tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                    if (tempCodePoint > 127) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                    tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                      codePoint = tempCodePoint;
                    }
                  }
                  break;
                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];
                  if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                    tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                      codePoint = tempCodePoint;
                    }
                  }
              }
            }
            if (codePoint === null) {
              codePoint = 65533;
              bytesPerSequence = 1;
            } else if (codePoint > 65535) {
              codePoint -= 65536;
              res.push(codePoint >>> 10 & 1023 | 55296);
              codePoint = 56320 | codePoint & 1023;
            }
            res.push(codePoint);
            i += bytesPerSequence;
          }
          var len = res.length;
          var str = "";
          var j = 0;
          while (j < len) {
            str += String.fromCharCode.apply(String, res.slice(j, j += 4096));
          }
          return str;
        }
        __name(stringDecode, "stringDecode");
        var textEncode = typeof TextEncoder === "function" ? TextEncoder.prototype.encode.bind(new TextEncoder()) : stringEncode;
        var textDecode = typeof TextDecoder === "function" ? TextDecoder.prototype.decode.bind(new TextDecoder()) : stringDecode;
        function FakeBlobBuilder() {
          function bufferClone(buf) {
            var view = new Array(buf.byteLength);
            var array = new Uint8Array(buf);
            var i = view.length;
            while (i--) {
              view[i] = array[i];
            }
            return view;
          }
          __name(bufferClone, "bufferClone");
          function array2base64(input) {
            var byteToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
              var byte1 = input[i];
              var haveByte2 = i + 1 < input.length;
              var byte2 = haveByte2 ? input[i + 1] : 0;
              var haveByte3 = i + 2 < input.length;
              var byte3 = haveByte3 ? input[i + 2] : 0;
              var outByte1 = byte1 >> 2;
              var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
              var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
              var outByte4 = byte3 & 63;
              if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                  outByte3 = 64;
                }
              }
              output.push(
                byteToCharMap[outByte1],
                byteToCharMap[outByte2],
                byteToCharMap[outByte3],
                byteToCharMap[outByte4]
              );
            }
            return output.join("");
          }
          __name(array2base64, "array2base64");
          var create = Object.create || function(a) {
            function c() {
            }
            __name(c, "c");
            c.prototype = a;
            return new c();
          };
          function getObjectTypeName(o) {
            return Object.prototype.toString.call(o).slice(8, -1);
          }
          __name(getObjectTypeName, "getObjectTypeName");
          function isPrototypeOf(c, o) {
            return typeof c === "object" && Object.prototype.isPrototypeOf.call(c.prototype, o);
          }
          __name(isPrototypeOf, "isPrototypeOf");
          function isDataView(o) {
            return getObjectTypeName(o) === "DataView" || isPrototypeOf(global2.DataView, o);
          }
          __name(isDataView, "isDataView");
          var arrayBufferClassNames = [
            "Int8Array",
            "Uint8Array",
            "Uint8ClampedArray",
            "Int16Array",
            "Uint16Array",
            "Int32Array",
            "Uint32Array",
            "Float32Array",
            "Float64Array",
            "ArrayBuffer"
          ];
          function includes(a, v) {
            return a.indexOf(v) !== -1;
          }
          __name(includes, "includes");
          function isArrayBuffer(o) {
            return includes(arrayBufferClassNames, getObjectTypeName(o)) || isPrototypeOf(global2.ArrayBuffer, o);
          }
          __name(isArrayBuffer, "isArrayBuffer");
          function concatTypedarrays(chunks) {
            var size = 0;
            var j = chunks.length;
            while (j--) {
              size += chunks[j].length;
            }
            var b = new Uint8Array(size);
            var offset = 0;
            for (var i = 0; i < chunks.length; i++) {
              var chunk = chunks[i];
              b.set(chunk, offset);
              offset += chunk.byteLength || chunk.length;
            }
            return b;
          }
          __name(concatTypedarrays, "concatTypedarrays");
          function Blob3(chunks, opts) {
            chunks = chunks ? chunks.slice() : [];
            opts = opts == null ? {} : opts;
            for (var i = 0, len = chunks.length; i < len; i++) {
              var chunk = chunks[i];
              if (chunk instanceof Blob3) {
                chunks[i] = chunk._buffer;
              } else if (typeof chunk === "string") {
                chunks[i] = textEncode(chunk);
              } else if (isDataView(chunk)) {
                chunks[i] = bufferClone(chunk.buffer);
              } else if (isArrayBuffer(chunk)) {
                chunks[i] = bufferClone(chunk);
              } else {
                chunks[i] = textEncode(String(chunk));
              }
            }
            this._buffer = global2.Uint8Array ? concatTypedarrays(chunks) : [].concat.apply([], chunks);
            this.size = this._buffer.length;
            this.type = opts.type || "";
            if (/[^\\u0020-\\u007E]/.test(this.type)) {
              this.type = "";
            } else {
              this.type = this.type.toLowerCase();
            }
          }
          __name(Blob3, "Blob");
          Blob3.prototype.arrayBuffer = function() {
            return Promise.resolve(this._buffer.buffer || this._buffer);
          };
          Blob3.prototype.text = function() {
            return Promise.resolve(textDecode(this._buffer));
          };
          Blob3.prototype.slice = function(start, end, type) {
            var slice = this._buffer.slice(start || 0, end || this._buffer.length);
            return new Blob3([slice], { type });
          };
          Blob3.prototype.toString = function() {
            return "[object Blob]";
          };
          function File2(chunks, name, opts) {
            opts = opts || {};
            var a = Blob3.call(this, chunks, opts) || this;
            a.name = name.replace(/\\//g, ":");
            a.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : /* @__PURE__ */ new Date();
            a.lastModified = +a.lastModifiedDate;
            return a;
          }
          __name(File2, "File");
          File2.prototype = create(Blob3.prototype);
          File2.prototype.constructor = File2;
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(File2, Blob3);
          } else {
            try {
              File2.__proto__ = Blob3;
            } catch (e) {
            }
          }
          File2.prototype.toString = function() {
            return "[object File]";
          };
          function FileReader2() {
            if (!(this instanceof FileReader2)) {
              throw new TypeError("Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
            }
            var delegate = document.createDocumentFragment();
            this.addEventListener = delegate.addEventListener;
            this.dispatchEvent = function(evt) {
              var local = this["on" + evt.type];
              if (typeof local === "function")
                local(evt);
              delegate.dispatchEvent(evt);
            };
            this.removeEventListener = delegate.removeEventListener;
          }
          __name(FileReader2, "FileReader");
          function _read(fr, blob2, kind) {
            if (!(blob2 instanceof Blob3)) {
              throw new TypeError("Failed to execute '" + kind + "' on 'FileReader': parameter 1 is not of type 'Blob'.");
            }
            fr.result = "";
            setTimeout(function() {
              this.readyState = FileReader2.LOADING;
              fr.dispatchEvent(new Event("load"));
              fr.dispatchEvent(new Event("loadend"));
            });
          }
          __name(_read, "_read");
          FileReader2.EMPTY = 0;
          FileReader2.LOADING = 1;
          FileReader2.DONE = 2;
          FileReader2.prototype.error = null;
          FileReader2.prototype.onabort = null;
          FileReader2.prototype.onerror = null;
          FileReader2.prototype.onload = null;
          FileReader2.prototype.onloadend = null;
          FileReader2.prototype.onloadstart = null;
          FileReader2.prototype.onprogress = null;
          FileReader2.prototype.readAsDataURL = function(blob2) {
            _read(this, blob2, "readAsDataURL");
            this.result = "data:" + blob2.type + ";base64," + array2base64(blob2._buffer);
          };
          FileReader2.prototype.readAsText = function(blob2) {
            _read(this, blob2, "readAsText");
            this.result = textDecode(blob2._buffer);
          };
          FileReader2.prototype.readAsArrayBuffer = function(blob2) {
            _read(this, blob2, "readAsText");
            this.result = (blob2._buffer.buffer || blob2._buffer).slice();
          };
          FileReader2.prototype.abort = function() {
          };
          URL.createObjectURL = function(blob2) {
            return blob2 instanceof Blob3 ? "data:" + blob2.type + ";base64," + array2base64(blob2._buffer) : createObjectURL.call(URL, blob2);
          };
          URL.revokeObjectURL = function(url) {
            revokeObjectURL && revokeObjectURL.call(URL, url);
          };
          var _send = global2.XMLHttpRequest && global2.XMLHttpRequest.prototype.send;
          if (_send) {
            XMLHttpRequest.prototype.send = function(data) {
              if (data instanceof Blob3) {
                this.setRequestHeader("Content-Type", data.type);
                _send.call(this, textDecode(data._buffer));
              } else {
                _send.call(this, data);
              }
            };
          }
          exports3.Blob = Blob3;
          exports3.File = File2;
          exports3.FileReader = FileReader2;
          exports3.URL = URL;
        }
        __name(FakeBlobBuilder, "FakeBlobBuilder");
        function fixFileAndXHR() {
          var isIE = !!global2.ActiveXObject || "-ms-scroll-limit" in document.documentElement.style && "-ms-ime-align" in document.documentElement.style;
          var _send = global2.XMLHttpRequest && global2.XMLHttpRequest.prototype.send;
          if (isIE && _send) {
            XMLHttpRequest.prototype.send = function(data) {
              if (data instanceof Blob) {
                this.setRequestHeader("Content-Type", data.type);
                _send.call(this, data);
              } else {
                _send.call(this, data);
              }
            };
          }
          try {
            new File([], "");
            exports3.File = global2.File;
            exports3.FileReader = global2.FileReader;
          } catch (e) {
            try {
              exports3.File = new Function(
                'class File extends Blob {constructor(chunks, name, opts) {opts = opts || {};super(chunks, opts || {});this.name = name.replace(/\\\\//g, ":");this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date();this.lastModified = +this.lastModifiedDate;}};return new File([], ""), File'
              )();
            } catch (e2) {
              exports3.File = function(b, d, c) {
                var blob2 = new Blob(b, c);
                var t = c && void 0 !== c.lastModified ? new Date(c.lastModified) : /* @__PURE__ */ new Date();
                blob2.name = d.replace(/\\//g, ":");
                blob2.lastModifiedDate = t;
                blob2.lastModified = +t;
                blob2.toString = function() {
                  return "[object File]";
                };
                if (strTag) {
                  blob2[strTag] = "File";
                }
                return blob2;
              };
            }
          }
        }
        __name(fixFileAndXHR, "fixFileAndXHR");
        if (blobSupported) {
          fixFileAndXHR();
          exports3.Blob = blobSupportsArrayBufferView ? global2.Blob : BlobConstructor;
        } else if (blobBuilderSupported) {
          fixFileAndXHR();
          exports3.Blob = BlobBuilderConstructor;
        } else {
          FakeBlobBuilder();
        }
        if (strTag) {
          if (!exports3.File.prototype[strTag])
            exports3.File.prototype[strTag] = "File";
          if (!exports3.Blob.prototype[strTag])
            exports3.Blob.prototype[strTag] = "Blob";
          if (!exports3.FileReader.prototype[strTag])
            exports3.FileReader.prototype[strTag] = "FileReader";
        }
        var blob = exports3.Blob.prototype;
        var stream;
        try {
          new ReadableStream({ type: "bytes" });
          stream = /* @__PURE__ */ __name(function stream2() {
            var position = 0;
            var blob2 = this;
            return new ReadableStream({
              type: "bytes",
              autoAllocateChunkSize: 524288,
              pull: function(controller) {
                var v = controller.byobRequest.view;
                var chunk = blob2.slice(position, position + v.byteLength);
                return chunk.arrayBuffer().then(function(buffer) {
                  var uint8array = new Uint8Array(buffer);
                  var bytesRead = uint8array.byteLength;
                  position += bytesRead;
                  v.set(uint8array);
                  controller.byobRequest.respond(bytesRead);
                  if (position >= blob2.size)
                    controller.close();
                });
              }
            });
          }, "stream");
        } catch (e) {
          try {
            new ReadableStream({});
            stream = /* @__PURE__ */ __name(function stream2(blob2) {
              var position = 0;
              return new ReadableStream({
                pull: function(controller) {
                  var chunk = blob2.slice(position, position + 524288);
                  return chunk.arrayBuffer().then(function(buffer) {
                    position += buffer.byteLength;
                    var uint8array = new Uint8Array(buffer);
                    controller.enqueue(uint8array);
                    if (position == blob2.size)
                      controller.close();
                  });
                }
              });
            }, "stream");
          } catch (e2) {
            try {
              new Response("").body.getReader().read();
              stream = /* @__PURE__ */ __name(function stream2() {
                return new Response(this).body;
              }, "stream");
            } catch (e3) {
              stream = /* @__PURE__ */ __name(function stream2() {
                throw new Error("Include https://github.com/MattiasBuelens/web-streams-polyfill");
              }, "stream");
            }
          }
        }
        function promisify(obj) {
          return new Promise(function(resolve, reject) {
            obj.onload = obj.onerror = function(evt) {
              obj.onload = obj.onerror = null;
              evt.type === "load" ? resolve(obj.result || obj) : reject(new Error("Failed to read the blob/file"));
            };
          });
        }
        __name(promisify, "promisify");
        if (!blob.arrayBuffer) {
          blob.arrayBuffer = /* @__PURE__ */ __name(function arrayBuffer() {
            var fr = new FileReader();
            fr.readAsArrayBuffer(this);
            return promisify(fr);
          }, "arrayBuffer");
        }
        if (!blob.text) {
          blob.text = /* @__PURE__ */ __name(function text() {
            var fr = new FileReader();
            fr.readAsText(this);
            return promisify(fr);
          }, "text");
        }
        if (!blob.stream) {
          blob.stream = stream;
        }
      });
    })(
      typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || exports2
    );
  }
});

// src/primitives/blob.js
var blob_exports = {};
__export(blob_exports, {
  Blob: () => import_blob_polyfill.Blob
});
module.exports = __toCommonJS(blob_exports);
init_define_process();
var import_blob_polyfill = __toESM(require_Blob());
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Blob
});
`;
  }
});

// ../primitives/dist/structured-clone.js.text.js
var require_structured_clone_js_text = __commonJS({
  "../primitives/dist/structured-clone.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n// src/primitives/structured-clone.js\nvar structured_clone_exports = {};\n__export(structured_clone_exports, {\n  structuredClone: () => structuredClone2\n});\nmodule.exports = __toCommonJS(structured_clone_exports);\n\n// ../../node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/types.js\nvar VOID = -1;\nvar PRIMITIVE = 0;\nvar ARRAY = 1;\nvar OBJECT = 2;\nvar DATE = 3;\nvar REGEXP = 4;\nvar MAP = 5;\nvar SET = 6;\nvar ERROR = 7;\nvar BIGINT = 8;\n\n// ../../node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/deserialize.js\nvar env = typeof self === "object" ? self : globalThis;\nvar deserializer = /* @__PURE__ */ __name(($, _) => {\n  const as = /* @__PURE__ */ __name((out, index) => {\n    $.set(index, out);\n    return out;\n  }, "as");\n  const unpair = /* @__PURE__ */ __name((index) => {\n    if ($.has(index))\n      return $.get(index);\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index2 of value)\n          arr.push(unpair(index2));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index2] of value)\n          object[unpair(key)] = unpair(index2);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const { source, flags } = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(/* @__PURE__ */ new Map(), index);\n        for (const [key, index2] of value)\n          map.set(unpair(key), unpair(index2));\n        return map;\n      }\n      case SET: {\n        const set = as(/* @__PURE__ */ new Set(), index);\n        for (const index2 of value)\n          set.add(unpair(index2));\n        return set;\n      }\n      case ERROR: {\n        const { name, message } = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case "BigInt":\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  }, "unpair");\n  return unpair;\n}, "deserializer");\nvar deserialize = /* @__PURE__ */ __name((serialized) => deserializer(/* @__PURE__ */ new Map(), serialized)(0), "deserialize");\n\n// ../../node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/serialize.js\nvar EMPTY = "";\nvar { toString } = {};\nvar { keys } = Object;\nvar typeOf = /* @__PURE__ */ __name((value) => {\n  const type = typeof value;\n  if (type !== "object" || !value)\n    return [PRIMITIVE, type];\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case "Array":\n      return [ARRAY, EMPTY];\n    case "Object":\n      return [OBJECT, EMPTY];\n    case "Date":\n      return [DATE, EMPTY];\n    case "RegExp":\n      return [REGEXP, EMPTY];\n    case "Map":\n      return [MAP, EMPTY];\n    case "Set":\n      return [SET, EMPTY];\n  }\n  if (asString.includes("Array"))\n    return [ARRAY, asString];\n  if (asString.includes("Error"))\n    return [ERROR, asString];\n  return [OBJECT, asString];\n}, "typeOf");\nvar shouldSkip = /* @__PURE__ */ __name(([TYPE, type]) => TYPE === PRIMITIVE && (type === "function" || type === "symbol"), "shouldSkip");\nvar serializer = /* @__PURE__ */ __name((strict, json, $, _) => {\n  const as = /* @__PURE__ */ __name((out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  }, "as");\n  const pair = /* @__PURE__ */ __name((value) => {\n    if ($.has(value))\n      return $.get(value);\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case "bigint":\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case "function":\n          case "symbol":\n            if (strict)\n              throw new TypeError("unable to serialize " + type);\n            entry = null;\n            break;\n          case "undefined":\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case "BigInt":\n              return as([type, value.toString()], value);\n            case "Boolean":\n            case "Number":\n            case "String":\n              return as([type, value.valueOf()], value);\n          }\n        }\n        if (json && "toJSON" in value)\n          return pair(value.toJSON());\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const { source, flags } = value;\n        return as([TYPE, { source, flags }], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n    const { message } = value;\n    return as([TYPE, { name: type, message }], value);\n  }, "pair");\n  return pair;\n}, "serializer");\nvar serialize = /* @__PURE__ */ __name((value, { json, lossy } = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, /* @__PURE__ */ new Map(), _)(value), _;\n}, "serialize");\n\n// ../../node_modules/.pnpm/@ungap+structured-clone@1.2.0/node_modules/@ungap/structured-clone/esm/index.js\nvar esm_default = typeof structuredClone === "function" ? (\n  /* c8 ignore start */\n  (any, options) => options && ("json" in options || "lossy" in options) ? deserialize(serialize(any, options)) : structuredClone(any)\n) : (any, options) => deserialize(serialize(any, options));\n\n// src/primitives/structured-clone.js\nfunction structuredClone2(value, options) {\n  if (value instanceof ReadableStream) {\n    const transform = new TransformStream({});\n    value.pipeTo(transform.writable);\n    return transform.readable;\n  }\n  return esm_default(value, options);\n}\n__name(structuredClone2, "structuredClone");\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  structuredClone\n});\n';
  }
});

// ../primitives/dist/fetch.js.text.js
var require_fetch_js_text = __commonJS({
  "../primitives/dist/fetch.js.text.js"(exports2, module2) {
    "use strict";
    module2.exports = '"use strict";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, "name", { value, configurable: true });\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === "object" || typeof from === "function") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. "__esModule" has not been set), then set\n  // "default" to the CommonJS "module.exports" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError("Cannot " + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, "read from private field");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError("Cannot add the same private member more than once");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, "write to private field");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, "access private method");\n  return method;\n};\n\n// <define:process>\nvar define_process_default;\nvar init_define_process = __esm({\n  "<define:process>"() {\n    define_process_default = { env: {}, versions: { node: "16.6.0" } };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/symbols.js\nvar require_symbols = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/symbols.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    module2.exports = {\n      kUrl: Symbol("url"),\n      kHeaders: Symbol("headers"),\n      kSignal: Symbol("signal"),\n      kState: Symbol("state"),\n      kGuard: Symbol("guard"),\n      kRealm: Symbol("realm")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/symbols.js\nvar require_symbols2 = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/symbols.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    module2.exports = {\n      kClose: Symbol("close"),\n      kDestroy: Symbol("destroy"),\n      kDispatch: Symbol("dispatch"),\n      kUrl: Symbol("url"),\n      kWriting: Symbol("writing"),\n      kResuming: Symbol("resuming"),\n      kQueue: Symbol("queue"),\n      kConnect: Symbol("connect"),\n      kConnecting: Symbol("connecting"),\n      kHeadersList: Symbol("headers list"),\n      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),\n      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),\n      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),\n      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),\n      kKeepAlive: Symbol("keep alive"),\n      kHeadersTimeout: Symbol("headers timeout"),\n      kBodyTimeout: Symbol("body timeout"),\n      kServerName: Symbol("server name"),\n      kLocalAddress: Symbol("local address"),\n      kHost: Symbol("host"),\n      kNoRef: Symbol("no ref"),\n      kBodyUsed: Symbol("used"),\n      kRunning: Symbol("running"),\n      kBlocking: Symbol("blocking"),\n      kPending: Symbol("pending"),\n      kSize: Symbol("size"),\n      kBusy: Symbol("busy"),\n      kQueued: Symbol("queued"),\n      kFree: Symbol("free"),\n      kConnected: Symbol("connected"),\n      kClosed: Symbol("closed"),\n      kNeedDrain: Symbol("need drain"),\n      kReset: Symbol("reset"),\n      kDestroyed: Symbol.for("nodejs.stream.destroyed"),\n      kMaxHeadersSize: Symbol("max headers size"),\n      kRunningIdx: Symbol("running index"),\n      kPendingIdx: Symbol("pending index"),\n      kError: Symbol("error"),\n      kClients: Symbol("clients"),\n      kClient: Symbol("client"),\n      kParser: Symbol("parser"),\n      kOnDestroyed: Symbol("destroy callbacks"),\n      kPipelining: Symbol("pipelining"),\n      kSocket: Symbol("socket"),\n      kHostHeader: Symbol("host header"),\n      kConnector: Symbol("connector"),\n      kStrictContentLength: Symbol("strict content length"),\n      kMaxRedirections: Symbol("maxRedirections"),\n      kMaxRequests: Symbol("maxRequestsPerClient"),\n      kProxy: Symbol("proxy agent options"),\n      kCounter: Symbol("socket request counter"),\n      kInterceptors: Symbol("dispatch interceptors"),\n      kMaxResponseSize: Symbol("max response size")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/errors.js\nvar require_errors = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/errors.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var _UndiciError = class _UndiciError extends Error {\n      constructor(message) {\n        super(message);\n        this.name = "UndiciError";\n        this.code = "UND_ERR";\n      }\n    };\n    __name(_UndiciError, "UndiciError");\n    var UndiciError = _UndiciError;\n    var _ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _ConnectTimeoutError);\n        this.name = "ConnectTimeoutError";\n        this.message = message || "Connect Timeout Error";\n        this.code = "UND_ERR_CONNECT_TIMEOUT";\n      }\n    };\n    __name(_ConnectTimeoutError, "ConnectTimeoutError");\n    var ConnectTimeoutError = _ConnectTimeoutError;\n    var _HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _HeadersTimeoutError);\n        this.name = "HeadersTimeoutError";\n        this.message = message || "Headers Timeout Error";\n        this.code = "UND_ERR_HEADERS_TIMEOUT";\n      }\n    };\n    __name(_HeadersTimeoutError, "HeadersTimeoutError");\n    var HeadersTimeoutError = _HeadersTimeoutError;\n    var _HeadersOverflowError = class _HeadersOverflowError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _HeadersOverflowError);\n        this.name = "HeadersOverflowError";\n        this.message = message || "Headers Overflow Error";\n        this.code = "UND_ERR_HEADERS_OVERFLOW";\n      }\n    };\n    __name(_HeadersOverflowError, "HeadersOverflowError");\n    var HeadersOverflowError = _HeadersOverflowError;\n    var _BodyTimeoutError = class _BodyTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _BodyTimeoutError);\n        this.name = "BodyTimeoutError";\n        this.message = message || "Body Timeout Error";\n        this.code = "UND_ERR_BODY_TIMEOUT";\n      }\n    };\n    __name(_BodyTimeoutError, "BodyTimeoutError");\n    var BodyTimeoutError = _BodyTimeoutError;\n    var _ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {\n      constructor(message, statusCode, headers, body) {\n        super(message);\n        Error.captureStackTrace(this, _ResponseStatusCodeError);\n        this.name = "ResponseStatusCodeError";\n        this.message = message || "Response Status Code Error";\n        this.code = "UND_ERR_RESPONSE_STATUS_CODE";\n        this.body = body;\n        this.status = statusCode;\n        this.statusCode = statusCode;\n        this.headers = headers;\n      }\n    };\n    __name(_ResponseStatusCodeError, "ResponseStatusCodeError");\n    var ResponseStatusCodeError = _ResponseStatusCodeError;\n    var _InvalidArgumentError = class _InvalidArgumentError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _InvalidArgumentError);\n        this.name = "InvalidArgumentError";\n        this.message = message || "Invalid Argument Error";\n        this.code = "UND_ERR_INVALID_ARG";\n      }\n    };\n    __name(_InvalidArgumentError, "InvalidArgumentError");\n    var InvalidArgumentError2 = _InvalidArgumentError;\n    var _InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _InvalidReturnValueError);\n        this.name = "InvalidReturnValueError";\n        this.message = message || "Invalid Return Value Error";\n        this.code = "UND_ERR_INVALID_RETURN_VALUE";\n      }\n    };\n    __name(_InvalidReturnValueError, "InvalidReturnValueError");\n    var InvalidReturnValueError = _InvalidReturnValueError;\n    var _RequestAbortedError = class _RequestAbortedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _RequestAbortedError);\n        this.name = "AbortError";\n        this.message = message || "Request aborted";\n        this.code = "UND_ERR_ABORTED";\n      }\n    };\n    __name(_RequestAbortedError, "RequestAbortedError");\n    var RequestAbortedError = _RequestAbortedError;\n    var _InformationalError = class _InformationalError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _InformationalError);\n        this.name = "InformationalError";\n        this.message = message || "Request information";\n        this.code = "UND_ERR_INFO";\n      }\n    };\n    __name(_InformationalError, "InformationalError");\n    var InformationalError = _InformationalError;\n    var _RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _RequestContentLengthMismatchError);\n        this.name = "RequestContentLengthMismatchError";\n        this.message = message || "Request body length does not match content-length header";\n        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";\n      }\n    };\n    __name(_RequestContentLengthMismatchError, "RequestContentLengthMismatchError");\n    var RequestContentLengthMismatchError = _RequestContentLengthMismatchError;\n    var _ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _ResponseContentLengthMismatchError);\n        this.name = "ResponseContentLengthMismatchError";\n        this.message = message || "Response body length does not match content-length header";\n        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";\n      }\n    };\n    __name(_ResponseContentLengthMismatchError, "ResponseContentLengthMismatchError");\n    var ResponseContentLengthMismatchError = _ResponseContentLengthMismatchError;\n    var _ClientDestroyedError = class _ClientDestroyedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _ClientDestroyedError);\n        this.name = "ClientDestroyedError";\n        this.message = message || "The client is destroyed";\n        this.code = "UND_ERR_DESTROYED";\n      }\n    };\n    __name(_ClientDestroyedError, "ClientDestroyedError");\n    var ClientDestroyedError = _ClientDestroyedError;\n    var _ClientClosedError = class _ClientClosedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _ClientClosedError);\n        this.name = "ClientClosedError";\n        this.message = message || "The client is closed";\n        this.code = "UND_ERR_CLOSED";\n      }\n    };\n    __name(_ClientClosedError, "ClientClosedError");\n    var ClientClosedError = _ClientClosedError;\n    var _SocketError = class _SocketError extends UndiciError {\n      constructor(message, socket) {\n        super(message);\n        Error.captureStackTrace(this, _SocketError);\n        this.name = "SocketError";\n        this.message = message || "Socket error";\n        this.code = "UND_ERR_SOCKET";\n        this.socket = socket;\n      }\n    };\n    __name(_SocketError, "SocketError");\n    var SocketError = _SocketError;\n    var _NotSupportedError = class _NotSupportedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _NotSupportedError);\n        this.name = "NotSupportedError";\n        this.message = message || "Not supported error";\n        this.code = "UND_ERR_NOT_SUPPORTED";\n      }\n    };\n    __name(_NotSupportedError, "NotSupportedError");\n    var NotSupportedError = _NotSupportedError;\n    var _BalancedPoolMissingUpstreamError = class _BalancedPoolMissingUpstreamError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, NotSupportedError);\n        this.name = "MissingUpstreamError";\n        this.message = message || "No upstream has been added to the BalancedPool";\n        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";\n      }\n    };\n    __name(_BalancedPoolMissingUpstreamError, "BalancedPoolMissingUpstreamError");\n    var BalancedPoolMissingUpstreamError = _BalancedPoolMissingUpstreamError;\n    var _HTTPParserError = class _HTTPParserError extends Error {\n      constructor(message, code, data) {\n        super(message);\n        Error.captureStackTrace(this, _HTTPParserError);\n        this.name = "HTTPParserError";\n        this.code = code ? `HPE_${code}` : void 0;\n        this.data = data ? data.toString() : void 0;\n      }\n    };\n    __name(_HTTPParserError, "HTTPParserError");\n    var HTTPParserError = _HTTPParserError;\n    var _ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _ResponseExceededMaxSizeError);\n        this.name = "ResponseExceededMaxSizeError";\n        this.message = message || "Response content exceeded max size";\n        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";\n      }\n    };\n    __name(_ResponseExceededMaxSizeError, "ResponseExceededMaxSizeError");\n    var ResponseExceededMaxSizeError = _ResponseExceededMaxSizeError;\n    module2.exports = {\n      HTTPParserError,\n      UndiciError,\n      HeadersTimeoutError,\n      HeadersOverflowError,\n      BodyTimeoutError,\n      RequestContentLengthMismatchError,\n      ConnectTimeoutError,\n      ResponseStatusCodeError,\n      InvalidArgumentError: InvalidArgumentError2,\n      InvalidReturnValueError,\n      RequestAbortedError,\n      ClientDestroyedError,\n      ClientClosedError,\n      InformationalError,\n      SocketError,\n      NotSupportedError,\n      ResponseContentLengthMismatchError,\n      BalancedPoolMissingUpstreamError,\n      ResponseExceededMaxSizeError\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/util.js\nvar require_util = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/core/util.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var assert = require("assert");\n    var { kDestroyed, kBodyUsed } = require_symbols2();\n    var { IncomingMessage } = require("http");\n    var stream = require("stream");\n    var net = require("net");\n    var { InvalidArgumentError: InvalidArgumentError2 } = require_errors();\n    var { Blob: Blob2 } = require("buffer");\n    var nodeUtil = require("util");\n    var { stringify } = require("querystring");\n    var [nodeMajor, nodeMinor] = define_process_default.versions.node.split(".").map((v) => Number(v));\n    function nop() {\n    }\n    __name(nop, "nop");\n    function isStream(obj) {\n      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";\n    }\n    __name(isStream, "isStream");\n    function isBlobLike(object) {\n      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n    __name(isBlobLike, "isBlobLike");\n    function buildURL(url, queryParams) {\n      if (url.includes("?") || url.includes("#")) {\n        throw new Error(\'Query params cannot be passed when url already contains "?" or "#".\');\n      }\n      const stringified = stringify(queryParams);\n      if (stringified) {\n        url += "?" + stringified;\n      }\n      return url;\n    }\n    __name(buildURL, "buildURL");\n    function parseURL(url) {\n      if (typeof url === "string") {\n        url = new URL(url);\n        if (!/^https?:/.test(url.origin || url.protocol)) {\n          throw new InvalidArgumentError2("Invalid URL protocol: the URL must start with `http:` or `https:`.");\n        }\n        return url;\n      }\n      if (!url || typeof url !== "object") {\n        throw new InvalidArgumentError2("Invalid URL: The URL argument must be a non-null object.");\n      }\n      if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {\n        throw new InvalidArgumentError2("Invalid URL: port must be a valid integer or a string representation of an integer.");\n      }\n      if (url.path != null && typeof url.path !== "string") {\n        throw new InvalidArgumentError2("Invalid URL path: the path must be a string or null/undefined.");\n      }\n      if (url.pathname != null && typeof url.pathname !== "string") {\n        throw new InvalidArgumentError2("Invalid URL pathname: the pathname must be a string or null/undefined.");\n      }\n      if (url.hostname != null && typeof url.hostname !== "string") {\n        throw new InvalidArgumentError2("Invalid URL hostname: the hostname must be a string or null/undefined.");\n      }\n      if (url.origin != null && typeof url.origin !== "string") {\n        throw new InvalidArgumentError2("Invalid URL origin: the origin must be a string or null/undefined.");\n      }\n      if (!/^https?:/.test(url.origin || url.protocol)) {\n        throw new InvalidArgumentError2("Invalid URL protocol: the URL must start with `http:` or `https:`.");\n      }\n      if (!(url instanceof URL)) {\n        const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;\n        let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;\n        let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;\n        if (origin.endsWith("/")) {\n          origin = origin.substring(0, origin.length - 1);\n        }\n        if (path && !path.startsWith("/")) {\n          path = `/${path}`;\n        }\n        url = new URL(origin + path);\n      }\n      return url;\n    }\n    __name(parseURL, "parseURL");\n    function parseOrigin(url) {\n      url = parseURL(url);\n      if (url.pathname !== "/" || url.search || url.hash) {\n        throw new InvalidArgumentError2("invalid url");\n      }\n      return url;\n    }\n    __name(parseOrigin, "parseOrigin");\n    function getHostname(host) {\n      if (host[0] === "[") {\n        const idx2 = host.indexOf("]");\n        assert(idx2 !== -1);\n        return host.substr(1, idx2 - 1);\n      }\n      const idx = host.indexOf(":");\n      if (idx === -1)\n        return host;\n      return host.substr(0, idx);\n    }\n    __name(getHostname, "getHostname");\n    function getServerName(host) {\n      if (!host) {\n        return null;\n      }\n      assert.strictEqual(typeof host, "string");\n      const servername = getHostname(host);\n      if (net.isIP(servername)) {\n        return "";\n      }\n      return servername;\n    }\n    __name(getServerName, "getServerName");\n    function deepClone(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n    __name(deepClone, "deepClone");\n    function isAsyncIterable(obj) {\n      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");\n    }\n    __name(isAsyncIterable, "isAsyncIterable");\n    function isIterable(obj) {\n      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));\n    }\n    __name(isIterable, "isIterable");\n    function bodyLength(body) {\n      if (body == null) {\n        return 0;\n      } else if (isStream(body)) {\n        const state = body._readableState;\n        return state && state.ended === true && Number.isFinite(state.length) ? state.length : null;\n      } else if (isBlobLike(body)) {\n        return body.size != null ? body.size : null;\n      } else if (isBuffer(body)) {\n        return body.byteLength;\n      }\n      return null;\n    }\n    __name(bodyLength, "bodyLength");\n    function isDestroyed(stream2) {\n      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);\n    }\n    __name(isDestroyed, "isDestroyed");\n    function isReadableAborted(stream2) {\n      const state = stream2 && stream2._readableState;\n      return isDestroyed(stream2) && state && !state.endEmitted;\n    }\n    __name(isReadableAborted, "isReadableAborted");\n    function destroy(stream2, err) {\n      if (!isStream(stream2) || isDestroyed(stream2)) {\n        return;\n      }\n      if (typeof stream2.destroy === "function") {\n        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {\n          stream2.socket = null;\n        }\n        stream2.destroy(err);\n      } else if (err) {\n        define_process_default.nextTick((stream3, err2) => {\n          stream3.emit("error", err2);\n        }, stream2, err);\n      }\n      if (stream2.destroyed !== true) {\n        stream2[kDestroyed] = true;\n      }\n    }\n    __name(destroy, "destroy");\n    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/;\n    function parseKeepAliveTimeout(val) {\n      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);\n      return m ? parseInt(m[1], 10) * 1e3 : null;\n    }\n    __name(parseKeepAliveTimeout, "parseKeepAliveTimeout");\n    function parseHeaders(headers, obj = {}) {\n      for (let i = 0; i < headers.length; i += 2) {\n        const key = headers[i].toString().toLowerCase();\n        let val = obj[key];\n        if (!val) {\n          if (Array.isArray(headers[i + 1])) {\n            obj[key] = headers[i + 1];\n          } else {\n            obj[key] = headers[i + 1].toString("utf8");\n          }\n        } else {\n          if (!Array.isArray(val)) {\n            val = [val];\n            obj[key] = val;\n          }\n          val.push(headers[i + 1].toString("utf8"));\n        }\n      }\n      if ("content-length" in obj && "content-disposition" in obj) {\n        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");\n      }\n      return obj;\n    }\n    __name(parseHeaders, "parseHeaders");\n    function parseRawHeaders(headers) {\n      const ret = [];\n      let hasContentLength = false;\n      let contentDispositionIdx = -1;\n      for (let n = 0; n < headers.length; n += 2) {\n        const key = headers[n + 0].toString();\n        const val = headers[n + 1].toString("utf8");\n        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {\n          ret.push(key, val);\n          hasContentLength = true;\n        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {\n          contentDispositionIdx = ret.push(key, val) - 1;\n        } else {\n          ret.push(key, val);\n        }\n      }\n      if (hasContentLength && contentDispositionIdx !== -1) {\n        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");\n      }\n      return ret;\n    }\n    __name(parseRawHeaders, "parseRawHeaders");\n    function isBuffer(buffer) {\n      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n    }\n    __name(isBuffer, "isBuffer");\n    function validateHandler(handler, method, upgrade) {\n      if (!handler || typeof handler !== "object") {\n        throw new InvalidArgumentError2("handler must be an object");\n      }\n      if (typeof handler.onConnect !== "function") {\n        throw new InvalidArgumentError2("invalid onConnect method");\n      }\n      if (typeof handler.onError !== "function") {\n        throw new InvalidArgumentError2("invalid onError method");\n      }\n      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {\n        throw new InvalidArgumentError2("invalid onBodySent method");\n      }\n      if (upgrade || method === "CONNECT") {\n        if (typeof handler.onUpgrade !== "function") {\n          throw new InvalidArgumentError2("invalid onUpgrade method");\n        }\n      } else {\n        if (typeof handler.onHeaders !== "function") {\n          throw new InvalidArgumentError2("invalid onHeaders method");\n        }\n        if (typeof handler.onData !== "function") {\n          throw new InvalidArgumentError2("invalid onData method");\n        }\n        if (typeof handler.onComplete !== "function") {\n          throw new InvalidArgumentError2("invalid onComplete method");\n        }\n      }\n    }\n    __name(validateHandler, "validateHandler");\n    function isDisturbed(body) {\n      return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));\n    }\n    __name(isDisturbed, "isDisturbed");\n    function isErrored(body) {\n      return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: \'errored\'/.test(\n        nodeUtil.inspect(body)\n      )));\n    }\n    __name(isErrored, "isErrored");\n    function isReadable(body) {\n      return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: \'readable\'/.test(\n        nodeUtil.inspect(body)\n      )));\n    }\n    __name(isReadable, "isReadable");\n    function getSocketInfo(socket) {\n      return {\n        localAddress: socket.localAddress,\n        localPort: socket.localPort,\n        remoteAddress: socket.remoteAddress,\n        remotePort: socket.remotePort,\n        remoteFamily: socket.remoteFamily,\n        timeout: socket.timeout,\n        bytesWritten: socket.bytesWritten,\n        bytesRead: socket.bytesRead\n      };\n    }\n    __name(getSocketInfo, "getSocketInfo");\n    var ReadableStream;\n    function ReadableStreamFrom(iterable) {\n      if (!ReadableStream) {\n        ReadableStream = require("./streams").ReadableStream;\n      }\n      if (ReadableStream.from) {\n        return ReadableStream.from(iterable);\n      }\n      let iterator;\n      return new ReadableStream(\n        {\n          async start() {\n            iterator = iterable[Symbol.asyncIterator]();\n          },\n          async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n              queueMicrotask(() => {\n                controller.close();\n              });\n            } else {\n              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);\n              controller.enqueue(new Uint8Array(buf));\n            }\n            return controller.desiredSize > 0;\n          },\n          async cancel(reason) {\n            await iterator.return();\n          }\n        },\n        0\n      );\n    }\n    __name(ReadableStreamFrom, "ReadableStreamFrom");\n    function isFormDataLike(object) {\n      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";\n    }\n    __name(isFormDataLike, "isFormDataLike");\n    function throwIfAborted(signal) {\n      if (!signal) {\n        return;\n      }\n      if (typeof signal.throwIfAborted === "function") {\n        signal.throwIfAborted();\n      } else {\n        if (signal.aborted) {\n          const err = new Error("The operation was aborted");\n          err.name = "AbortError";\n          throw err;\n        }\n      }\n    }\n    __name(throwIfAborted, "throwIfAborted");\n    var events;\n    function addAbortListener(signal, listener) {\n      if (typeof Symbol.dispose === "symbol") {\n        if (!events) {\n          events = require("events");\n        }\n        if (typeof events.addAbortListener === "function" && "aborted" in signal) {\n          return events.addAbortListener(signal, listener);\n        }\n      }\n      if ("addEventListener" in signal) {\n        signal.addEventListener("abort", listener, { once: true });\n        return () => signal.removeEventListener("abort", listener);\n      }\n      signal.addListener("abort", listener);\n      return () => signal.removeListener("abort", listener);\n    }\n    __name(addAbortListener, "addAbortListener");\n    var hasToWellFormed = !!String.prototype.toWellFormed;\n    function toUSVString(val) {\n      if (hasToWellFormed) {\n        return `${val}`.toWellFormed();\n      } else if (nodeUtil.toUSVString) {\n        return nodeUtil.toUSVString(val);\n      }\n      return `${val}`;\n    }\n    __name(toUSVString, "toUSVString");\n    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);\n    kEnumerableProperty.enumerable = true;\n    module2.exports = {\n      kEnumerableProperty,\n      nop,\n      isDisturbed,\n      isErrored,\n      isReadable,\n      toUSVString,\n      isReadableAborted,\n      isBlobLike,\n      parseOrigin,\n      parseURL,\n      getServerName,\n      isStream,\n      isIterable,\n      isAsyncIterable,\n      isDestroyed,\n      parseRawHeaders,\n      parseHeaders,\n      parseKeepAliveTimeout,\n      destroy,\n      bodyLength,\n      deepClone,\n      ReadableStreamFrom,\n      isBuffer,\n      validateHandler,\n      getSocketInfo,\n      isFormDataLike,\n      buildURL,\n      throwIfAborted,\n      addAbortListener,\n      nodeMajor,\n      nodeMinor,\n      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/constants.js\nvar require_constants = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/constants.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var { MessageChannel, receiveMessageOnPort } = require("worker_threads");\n    var corsSafeListedMethods = ["GET", "HEAD", "POST"];\n    var nullBodyStatus = [101, 204, 205, 304];\n    var redirectStatus = [301, 302, 303, 307, 308];\n    var badPorts = [\n      "1",\n      "7",\n      "9",\n      "11",\n      "13",\n      "15",\n      "17",\n      "19",\n      "20",\n      "21",\n      "22",\n      "23",\n      "25",\n      "37",\n      "42",\n      "43",\n      "53",\n      "69",\n      "77",\n      "79",\n      "87",\n      "95",\n      "101",\n      "102",\n      "103",\n      "104",\n      "109",\n      "110",\n      "111",\n      "113",\n      "115",\n      "117",\n      "119",\n      "123",\n      "135",\n      "137",\n      "139",\n      "143",\n      "161",\n      "179",\n      "389",\n      "427",\n      "465",\n      "512",\n      "513",\n      "514",\n      "515",\n      "526",\n      "530",\n      "531",\n      "532",\n      "540",\n      "548",\n      "554",\n      "556",\n      "563",\n      "587",\n      "601",\n      "636",\n      "989",\n      "990",\n      "993",\n      "995",\n      "1719",\n      "1720",\n      "1723",\n      "2049",\n      "3659",\n      "4045",\n      "5060",\n      "5061",\n      "6000",\n      "6566",\n      "6665",\n      "6666",\n      "6667",\n      "6668",\n      "6669",\n      "6697",\n      "10080"\n    ];\n    var referrerPolicy = [\n      "",\n      "no-referrer",\n      "no-referrer-when-downgrade",\n      "same-origin",\n      "origin",\n      "strict-origin",\n      "origin-when-cross-origin",\n      "strict-origin-when-cross-origin",\n      "unsafe-url"\n    ];\n    var requestRedirect = ["follow", "manual", "error"];\n    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];\n    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];\n    var requestCredentials = ["omit", "same-origin", "include"];\n    var requestCache = [\n      "default",\n      "no-store",\n      "reload",\n      "no-cache",\n      "force-cache",\n      "only-if-cached"\n    ];\n    var requestBodyHeader = [\n      "content-encoding",\n      "content-language",\n      "content-location",\n      "content-type",\n      // See https://github.com/nodejs/undici/issues/2021\n      // \'Content-Length\' is a forbidden header name, which is typically\n      // removed in the Headers implementation. However, undici doesn\'t\n      // filter out headers, so we add it here.\n      "content-length"\n    ];\n    var requestDuplex = [\n      "half"\n    ];\n    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];\n    var subresource = [\n      "audio",\n      "audioworklet",\n      "font",\n      "image",\n      "manifest",\n      "paintworklet",\n      "script",\n      "style",\n      "track",\n      "video",\n      "xslt",\n      ""\n    ];\n    var DOMException = globalThis.DOMException ?? (() => {\n      try {\n        atob("~");\n      } catch (err) {\n        return Object.getPrototypeOf(err).constructor;\n      }\n    })();\n    var channel;\n    var structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n    // structuredClone was added in v17.0.0, but fetch supports v16.8\n    /* @__PURE__ */ __name(function structuredClone2(value, options = void 0) {\n      if (arguments.length === 0) {\n        throw new TypeError("missing argument");\n      }\n      if (!channel) {\n        channel = new MessageChannel();\n      }\n      channel.port1.unref();\n      channel.port2.unref();\n      channel.port1.postMessage(value, options?.transfer);\n      return receiveMessageOnPort(channel.port2).message;\n    }, "structuredClone");\n    module2.exports = {\n      DOMException,\n      structuredClone,\n      subresource,\n      forbiddenMethods,\n      requestBodyHeader,\n      referrerPolicy,\n      requestRedirect,\n      requestMode,\n      requestCredentials,\n      requestCache,\n      redirectStatus,\n      corsSafeListedMethods,\n      nullBodyStatus,\n      safeMethods,\n      badPorts,\n      requestDuplex\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/global.js\nvar require_global = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/global.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var globalOrigin = Symbol.for("undici.globalOrigin.1");\n    function getGlobalOrigin() {\n      return globalThis[globalOrigin];\n    }\n    __name(getGlobalOrigin, "getGlobalOrigin");\n    function setGlobalOrigin(newOrigin) {\n      if (newOrigin !== void 0 && typeof newOrigin !== "string" && !(newOrigin instanceof URL)) {\n        throw new Error("Invalid base url");\n      }\n      if (newOrigin === void 0) {\n        Object.defineProperty(globalThis, globalOrigin, {\n          value: void 0,\n          writable: true,\n          enumerable: false,\n          configurable: false\n        });\n        return;\n      }\n      const parsedURL = new URL(newOrigin);\n      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {\n        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);\n      }\n      Object.defineProperty(globalThis, globalOrigin, {\n        value: parsedURL,\n        writable: true,\n        enumerable: false,\n        configurable: false\n      });\n    }\n    __name(setGlobalOrigin, "setGlobalOrigin");\n    module2.exports = {\n      getGlobalOrigin,\n      setGlobalOrigin\n    };\n  }\n});\n\n// src/patches/util-types.js\nvar require_util_types = __commonJS({\n  "src/patches/util-types.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    module2.exports = require("util").types;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/util.js\nvar require_util2 = __commonJS({\n  "../../node_modules/.pnpm/undici@5.23.0/node_modules/undici/lib/fetch/util.js"(exports2, module2) {\n    "use strict";\n    init_define_process();\n    var { redirectStatus, badPorts, referrerPolicy: referrerPolicyTokens } = require_constants();\n    var { getGlobalOrigin } = require_global();\n    var { performance: performance2 } = require("perf_hooks");\n    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();\n    var assert = require("assert");\n    var { isUint8Array } = require_util_types();\n    var crypto;\n    try {\n      crypto = require("crypto");\n    } catch {\n    }\n    function responseURL(response) {\n      const urlList = response.urlList;\n      const length = urlList.length;\n      return length === 0 ? null : urlList[length - 1].toString();\n    }\n    __name(responseURL, "responseURL");\n    function responseLocationURL(response, requestFragment) {\n      if (!redirectStatus.includes(response.status)) {\n        return null;\n      }\n      let location = response.headersList.get("location");\n      if (location !== null && isValidHeaderValue(location)) {\n        location = new URL(location, responseURL(response));\n      }\n      if (location && !location.hash) {\n        location.hash = requestFragment;\n      }\n      return location;\n    }\n    __name(responseLocationURL, "responseLocationURL");\n    function requestCurrentURL(request) {\n      return request.urlList[request.urlList.length - 1];\n    }\n    __name(requestCurrentURL, "requestCurrentURL");\n    function requestBadPort(request) {\n      const url = requestCurrentURL(request);\n      if (urlIsHttpHttpsScheme(url) && badPorts.includes(url.port)) {\n        return "blocked";\n      }\n      return "allowed";\n    }\n    __name(requestBadPort, "requestBadPort");\n    function isErrorLike(object) {\n      return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");\n    }\n    __name(isErrorLike, "isErrorLike");\n    function isValidReasonPhrase(statusText) {\n      for (let i = 0; i < statusText.length; ++i) {\n        const c = statusText.charCodeAt(i);\n        if (!(c === 9 || // HTAB\n        c >= 32 && c <= 126 || // SP / VCHAR\n        c >= 128 && c <= 255)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidReasonPhrase, "isValidReasonPhrase");\n    function isTokenChar(c) {\n      return !(c >= 127 || c <= 32 || c === "(" || c === ")" || c === "<" || c === ">" || c === "@" || c === "," || c === ";" || c === ":" || c === "\\\\" || c === \'"\' || c === "/" || c === "[" || c === "]" || c === "?" || c === "=" || c === "{" || c === "}");\n    }\n    __name(isTokenChar, "isTokenChar");\n    function isValidHTTPToken(characters) {\n      if (!characters || typeof characters !== "string") {\n        return false;\n      }\n      for (let i = 0; i < characters.length; ++i) {\n        const c = characters.charCodeAt(i);\n        if (c > 127 || !isTokenChar(c)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidHTTPToken, "isValidHTTPToken");\n    function isValidHeaderName2(potentialValue) {\n      if (potentialValue.length === 0) {\n        return false;\n      }\n      return isValidHTTPToken(potentialValue);\n    }\n    __name(isValidHeaderName2, "isValidHeaderName");\n    function isValidHeaderValue(potentialValue) {\n      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {\n        return false;\n      }\n      if (potentialValue.includes("\\0") || potentialValue.includes("\\r") || potentialValue.includes("\\n")) {\n        return false;\n      }\n      return true;\n    }\n    __name(isValidHeaderValue, "isValidHeaderValue");\n    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {\n      const { headersList } = actualResponse;\n      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");\n      let policy = "";\n      if (policyHeader.length > 0) {\n        for (let i = policyHeader.length; i !== 0; i--) {\n          const token = policyHeader[i - 1].trim();\n          if (referrerPolicyTokens.includes(token)) {\n            policy = token;\n            break;\n          }\n        }\n      }\n      if (policy !== "") {\n        request.referrerPolicy = policy;\n      }\n    }\n    __name(setRequestReferrerPolicyOnRedirect, "setRequestReferrerPolicyOnRedirect");\n    function crossOriginResourcePolicyCheck() {\n      return "allowed";\n    }\n    __name(crossOriginResourcePolicyCheck, "crossOriginResourcePolicyCheck");\n    function corsCheck() {\n      return "success";\n    }\n    __name(corsCheck, "corsCheck");\n    function TAOCheck() {\n      return "success";\n    }\n    __name(TAOCheck, "TAOCheck");\n    function appendFetchMetadata(httpRequest) {\n      let header = null;\n      header = httpRequest.mode;\n      httpRequest.headersList.set("sec-fetch-mode", header);\n    }\n    __name(appendFetchMetadata, "appendFetchMetadata");\n    function appendRequestOriginHeader(request) {\n      let serializedOrigin = request.origin;\n      if (request.responseTainting === "cors" || request.mode === "websocket") {\n        if (serializedOrigin) {\n          request.headersList.append("origin", serializedOrigin);\n        }\n      } else if (request.method !== "GET" && request.method !== "HEAD") {\n        switch (request.referrerPolicy) {\n          case "no-referrer":\n            serializedOrigin = null;\n            break;\n          case "no-referrer-when-downgrade":\n          case "strict-origin":\n          case "strict-origin-when-cross-origin":\n            if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n              serializedOrigin = null;\n            }\n            break;\n          case "same-origin":\n            if (!sameOrigin(request, requestCurrentURL(request))) {\n              serializedOrigin = null;\n            }\n            break;\n          default:\n        }\n        if (serializedOrigin) {\n          request.headersList.append("origin", serializedOrigin);\n        }\n      }\n    }\n    __name(appendRequestOriginHeader, "appendRequestOriginHeader");\n    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {\n      return performance2.now();\n    }\n    __name(coarsenedSharedCurrentTime, "coarsenedSharedCurrentTime");\n    function createOpaqueTimingInfo(timingInfo) {\n      return {\n        startTime: timingInfo.startTime ?? 0,\n        redirectStartTime: 0,\n        redirectEndTime: 0,\n        postRedirectStartTime: timingInfo.startTime ?? 0,\n        finalServiceWorkerStartTime: 0,\n        finalNetworkResponseStartTime: 0,\n        finalNetworkRequestStartTime: 0,\n        endTime: 0,\n        encodedBodySize: 0,\n        decodedBodySize: 0,\n        finalConnectionTimingInfo: null\n      };\n    }\n    __name(createOpaqueTimingInfo, "createOpaqueTimingInfo");\n    function makePolicyContainer() {\n      return {\n        referrerPolicy: "strict-origin-when-cross-origin"\n      };\n    }\n    __name(makePolicyContainer, "makePolicyContainer");\n    function clonePolicyContainer(policyContainer) {\n      return {\n        referrerPolicy: policyContainer.referrerPolicy\n      };\n    }\n    __name(clonePolicyContainer, "clonePolicyContainer");\n    function determineRequestsReferrer(request) {\n      const policy = request.referrerPolicy;\n      assert(policy);\n      let referrerSource = null;\n      if (request.referrer === "client") {\n        const globalOrigin = getGlobalOrigin();\n        if (!globalOrigin || globalOrigin.origin === "null") {\n          return "no-referrer";\n        }\n        referrerSource = new URL(globalOrigin);\n      } else if (request.referrer instanceof URL) {\n        referrerSource = request.referrer;\n      }\n      let referrerURL = stripURLForReferrer(referrerSource);\n      const referrerOrigin = stripURLForReferrer(referrerSource, true);\n      if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n      }\n      const areSameOrigin = sameOrigin(request, referrerURL);\n      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);\n      switch (policy) {\n        case "origin":\n          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);\n        case "unsafe-url":\n          return referrerURL;\n        case "same-origin":\n          return areSameOrigin ? referrerOrigin : "no-referrer";\n        case "origin-when-cross-origin":\n          return areSameOrigin ? referrerURL : referrerOrigin;\n        case "strict-origin-when-cross-origin": {\n          const currentURL = requestCurrentURL(request);\n          if (sameOrigin(referrerURL, currentURL)) {\n            return referrerURL;\n          }\n          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n            return "no-referrer";\n          }\n          return referrerOrigin;\n        }\n        case "strict-origin":\n        case "no-referrer-when-downgrade":\n        default:\n          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;\n      }\n    }\n    __name(determineRequestsReferrer, "determineRequestsReferrer");\n    function stripURLForReferrer(url, originOnly) {\n      assert(url instanceof URL);\n      if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {\n        return "no-referrer";\n      }\n      url.username = "";\n      url.password = "";\n      url.hash = "";\n      if (originOnly) {\n        url.pathname = "";\n        url.search = "";\n      }\n      return url;\n    }\n    __name(stripURLForReferrer, "stripURLForReferrer");\n    function isURLPotentiallyTrustworthy(url) {\n      if (!(url instanceof URL)) {\n        return false;\n      }\n      if (url.href === "about:blank" || url.href === "about:srcdoc") {\n        return true;\n      }\n      if (url.protocol === "data:")\n        return true;\n      if (url.protocol === "file:")\n        return true;\n      return isOriginPotentiallyTrustworthy(url.origin);\n      function isOriginPotentiallyTrustworthy(origin) {\n        if (origin == null || origin === "null")\n          return false;\n        const originAsURL = new URL(origin);\n        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {\n          return true;\n        }\n        if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {\n          return true;\n        }\n        return false;\n      }\n      __name(isOriginPotentiallyTrustworthy, "isOriginPotentiallyTrustworthy");\n    }\n    __name(isURLPotentiallyTrustworthy, "isURLPotentiallyTrustworthy");\n    function bytesMatch(bytes, metadataList) {\n      if (crypto === void 0) {\n        return true;\n      }\n      const parsedMetadata = parseMetadata(metadataList);\n      if (parsedMetadata === "no metadata") {\n        return true;\n      }\n      if (parsedMetadata.length === 0) {\n        return true;\n      }\n      const list = parsedMetadata.sort((c, d) => d.algo.localeCompare(c.algo));\n      const strongest = list[0].algo;\n      const metadata = list.filter((item) => item.algo === strongest);\n      for (const item of metadata) {\n        const algorithm = item.algo;\n        const expectedValue = item.hash;\n        const actualValue = crypto.createHash(algorithm).update(bytes).digest("base64");\n        if (actualValue === expectedValue) {\n          return true;\n        }\n      }\n      return false;\n    }\n    __name(bytesMatch, "bytesMatch");\n    var parseHashWithOptions = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\\x21-\\x7e]?)?/i;\n    function parseMetadata(metadata) {\n      const result = [];\n      let empty = true;\n      const supportedHashes = crypto.getHashes();\n      for (const token of metadata.split(" ")) {\n        empty = false;\n        const parsedToken = parseHashWithOptions.exec(token);\n        if (parsedToken === null || parsedToken.groups === void 0) {\n          continue;\n        }\n        const algorithm = parsedToken.groups.algo;\n        if (supportedHashes.includes(algorithm.toLowerCase())) {\n          result.push(parsedToken.groups);\n        }\n      }\n      if (empty === true) {\n        return "no metadata";\n      }\n      return result;\n    }\n    __name(parseMetadata, "parseMetadata");\n    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {\n    }\n    __name(tryUpgradeRequestToAPotentiallyTrustworthyURL, "tryUpgradeRequestToAPotentiallyTrustworthyURL");\n    function sameOrigin(A, B) {\n      if (A.origin === B.origin && A.origin === "null") {\n        return true;\n      }\n      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n        return true;\n      }\n      return false;\n    }\n    __name(sameOrigin, "sameOrigin");\n    function createDeferredPromise() {\n      let res;\n      let rej;\n      const promise = new Promise((resolve, reject) => {\n        res = resolve;\n        rej = reject;\n      });\n      return { promise, resolve: res, reject: rej };\n    }\n    __name(createDeferredPromise, "createDeferredPromise");\n    function isAborted(fetchParams) {\n      return fetchParams.controller.state === "aborted";\n    }\n    __name(isAborted, "isAborted");\n    function isCancelled(fetchParams) {\n      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";\n    }\n    __name(isCancelled, "isCancelled");\n    function normalizeMethod(method) {\n      return /^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/i.test(method) ? method.toUpperCase() : method;\n    }\n    __name(normalizeMethod, "normalizeMethod");\n    function serializeJavascriptValueToJSONString(value) {\n      const result = JSON.stringify(value);\n      if (result === void 0) {\n        throw new TypeError("Value is not JSON serializable");\n      }\n      assert(typeof result === "string");\n      return result;\n    }\n    __name(serializeJavascriptValueToJSONString, "serializeJavascriptValueToJSONString");\n    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n    function makeIterator(iterator, name, kind) {\n      const object = {\n        index: 0,\n        kind,\n        target: iterator\n      };\n      const i = {\n        next() {\n          if (Object.getPrototypeOf(this) !== i) {\n            throw new TypeError(\n              `\'next\' called on an object that does not implement interface ${name} Iterator.`\n            );\n          }\n          const { index, kind: kind2, target } = object;\n          const values = target();\n          const len = values.length;\n          if (index >= len) {\n            return { value: void 0, done: true };\n          }\n          const pair = values[index];\n          object.index = index + 1;\n          return iteratorResult(pair, kind2);\n        },\n        // The class 